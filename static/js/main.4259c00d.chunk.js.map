{"version":3,"sources":["RoomContext.tsx","components/Background.tsx","utils.ts","components/Floor.tsx","components/Point.tsx","components/Segment.tsx","components/Size.tsx","components/Room.tsx","components/Plan.tsx","components/UI/QuickMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoomContext","createContext","Background","width","height","useContext","__selectedRoom","__rooms","rooms","setRooms","setSelectedRoom","addRoom","e","id","window","prompt","find","room","alert","x","clientX","y","clientY","points","getPoints","this","reduce","acc","curr","i","absX","absY","offsetX","offsetY","tabIndex","fill","onDoubleClick","onClick","onKeyDown","console","log","keyCode","getPath","current","push","length","getAllPoints","roomPoints","Floor","polygon","stroke","Point","point","visible","roomIndex","findIndex","handle","onDrag","dnd","deltaX","deltaY","onStop","allPoints","map","otherPoint","Math","abs","className","cx","cy","r","strokeWidth","textAnchor","alignmentBaseline","pointerEvents","Segment","pathPoints","segmentIndex","__quickMenuPosition","__quickMenuState","__selectedPathPoints","setQuickMenuPosition","setQuickMenuState","setSelectedPathPoints","useState","isDragging","setIsDragging","a","b","data","path","line","d","segmentClicked","type","preventDefault","touches","pageX","pageY","prev","forEach","pathPoint","opacity","Size","dx","dy","c","round","floor","sqrt","style","startOffset","xlinkHref","Room","isSelected","cancel","disabled","newRooms","transform","filter","el","outline","join","index","key","Plan","selectedRoom","innerWidth","innerHeight","sort","QuickMenu","quickMenuPosition","quickMenuState","selectedPathPoints","handleClose","Menu","transitionDuration","enter","exit","anchorReference","anchorPosition","top","left","undefined","open","onClose","MenuItem","newPoints","persist","box","target","getBoundingClientRect","pointer","newPoint","XY","m","p","Infinity","addCorner","index1","splice","App","CTX","overscrollBehavior","onContextMenu","Provider","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4259c00d.chunk.js","sourcesContent":["import { createContext, useState } from 'react'\n\nexport const RoomContext = createContext(null) \n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\n\nexport default function Background({\n    width,\n    height,\n}: {\n    width: number;\n    height: number;\n}) {\n\n    const { __selectedRoom, __rooms } = useContext(RoomContext)\n\n    const [rooms, setRooms] = __rooms\n    const [_, setSelectedRoom] = __selectedRoom\n\n    const addRoom = (e: any) => {\n        const id = window.prompt(\"Dénomination de la pièce\");\n\n        if (id === '' || id === null) return\n\n        if (rooms.find((room) => room.id === id)) {\n            alert(`Une pièce nommée ${id} existe déjà. Création annulée !!!`);\n            return;\n        }\n\n        const room = {\n            id: id,\n            x : e.clientX ? e.clientX - 75 : width/2,\n            y : e.clientY ? e.clientY - 75 : height/2,\n            points: [\n                {x : 0, y : 0},\n                {x : 0, y : 150},\n                {x : 150, y : 150},\n                {x : 150, y : 0},\n            ],\n            getPoints() {\n                return this.points.reduce((acc, curr, i) => {\n                    acc[i] = {\n                        x : curr.x,\n                        y : curr.y,\n                        absX : curr.x + this.x,\n                        absY : curr.y + this.y,\n                        offsetX : this.x,\n                        offsetY : this.y,\n                        i,\n                        room : id,\n                        id : `${this.id}.${i}`\n                    }\n                    return acc\n                }, [])\n            }\n        };\n\n        setRooms([...rooms, room]);\n        setSelectedRoom(room.id);\n    }\n\n    const keyHandler = e => {\n        console.log('coucou')\n        if (e.keyCode === 78) {\n            addRoom(e)\n        }\n    }\n\n    return (\n        <rect\n            tabIndex={-1}\n            id=\"background\"\n            width={width}\n            height={height}\n            fill=\"#38a0f9\"\n            onDoubleClick={addRoom}\n            onClick={() => setSelectedRoom(null)}\n            onKeyDown={keyHandler}\n        />\n    );\n}\n","import { Path, Points } from \"./interfaces\";\nimport { Room } from './interfaces'\nimport Point from \"./components/Point\";\n\nexport function getPolygon(points) {\n    return points.map((point) => [point.x, point.y].join(\" \"));\n}\n\nexport function getPath(points) {\n    return points.reduce((acc, current, i) => {\n        acc[i] = [\n            current];\n        if (i > 0) {\n            acc[i - 1].push(current)\n        }\n        if (i === points.length - 1) acc[i].push(acc[0][0]);\n        return acc;\n    }, []);\n}\n\n\nexport function getAllPointsButThisRoom(rooms, roomIndex) {\n    let array = rooms\n        .filter((_, i) => i !== roomIndex)\n        .reduce((acc, curr, i) => {\n            curr.points.map(point => {\n                point.dx = curr.coords[0]\n                point.dy = curr.coords[1]\n                acc.push(point)\n            })\n            return acc\n        }, [])\n    return array\n}\n\nexport function getPointsAbsolutePosition(room) {\n    let array = room.points\n        .map(point => {\n            //console.log(point)\n            point.dx = room.coords[0]\n            point.dy = room.coords[1]\n            return point\n        })\n    return array\n}\n\nexport function getAllPoints(rooms) {\n    let array = rooms.reduce((acc, curr, i) => {\n        const roomPoints = curr.getPoints()\n        acc.push(...roomPoints)\n        return acc\n    }, [])\n    return array\n}\n\nexport function getThisRoomPoints(room: Room): Points {\n    let array = room.points.reduce((acc, curr, i) => {\n        acc[i] = {\n            x: curr[0],\n            y: curr[1],\n            dx: curr[0] + room.coords[0],\n            dy: curr[1] + room.coords[1],\n            i: i\n        }\n    }, [])\n    return array\n}\n\n// export function compareRoomPoints(rooms) {\n//     rooms.forEach((room, i) => {\n//         const allPoints = getAllPointsButThisRoom(rooms, i)\n//         let paths = getPath(room.points)\n//         paths.forEach(path => {\n//             allPoints.forEach(point => {\n//                 console.log(point)\n//                 isPointInPath(path, point)\n//             });\n//         });\n//     });\n// }\n\nexport function isPointInPath(path, point) {\n    const [a, b] = path\n\n    console.log(a)\n\n    const ax = a.XY[0] + a.XY.dx\n    const ay = a.XY[1] + a.XY.dy\n    const bx = b.XY[0] + b.XY.dx\n    const by = b.XY[1] + b.XY.dy\n\n    const dx = bx - ax\n    const dy = by - ay\n\n    const m = dy / dx\n\n    // ay = m * ax + offset  \n\n    const offset = ay - m * ax\n\n    let equation\n    if (dx === 0) { //verticale\n        console.log('droite verticale')\n        equation = ax - (point[0] + point.dx)\n    } else if (dy === 0) { //horizontale\n        equation = ay - (point[1] + point.dy)\n    } else {\n        equation = ay - m * ax - offset\n    }\n    console.log(equation)\n    console.log(point[1] + point.dx - m * (point[0] + point.dy) - offset)\n\n    if (point[1] + point.dx - m * (point[0] + point.dy) - offset === equation) {\n        console.log(\"coucou petite peruche\")\n    }\n\n\n    return equation\n\n}\n\n\nexport function addCorner(e, pathPoints) { //// props needed === pathPoints / \n\n    e.persist()\n    //////////////console.log(e.target.getBoundingClientRect())\n    //////////////console.log(e.clientX)\n    ////////////console.log(e.target)\n\n    let box = e.target.getBoundingClientRect()\n    ////////////console.log(box.left)\n    ////////////console.log(e.clientX)\n    let pointer = [e.clientX, e.clientY]\n\n    let newPoint = []\n\n    newPoint[0] = pathPoints[0].XY[0] < pathPoints[1].XY[0] ? pointer[0] - box.left + pathPoints[0].XY[0] : pointer[0] - box.left + pathPoints[1].XY[0]\n    // y = mx + b\n\n    let a = pathPoints[0]\n    let b = pathPoints[1]\n\n    //////////console.log(a.id.split('.')[2],b.id.split('.')[2])\n\n    let dx = a.XY[0] - b.XY[0]\n    let dy = a.XY[1] - b.XY[1]\n\n    let m = dy / dx\n    let p = a.XY[1] - m * a.XY[0]\n\n    //////////////console.log(m)\n\n    if (m === 0) {\n        //////////////console.log('ligne horizontale')\n        newPoint[1] = a.XY[1]\n    }\n\n    else if (m === Infinity || m === -Infinity) {\n        //////////////console.log('ligne verticale')\n        newPoint[0] = a.XY[0]\n        newPoint[1] = a.XY[1] < b.XY[1] ? Math.abs(pointer[1] - box.top + a.XY[1]) : Math.abs(pointer[1] - box.top + b.XY[1])\n    }\n\n    else {\n        newPoint[1] = m * newPoint[0] + p //+ (a.XY[0])\n        //point.y = m * point.x + p\n    }\n\n    //point.id = room.id + '.corner.' + room.points.length + 1\n\n    let index1 = a.i\n    let index2 = b.i\n    console.log([newPoint, newPoint])\n\n    return [newPoint, newPoint]\n\n    //points.splice(index1 + 1, 0, newPoint, newPoint)\n\n    //setPoints([...points])\n    //////console.log(points)\n}\n\n","import React from \"react\";\n\nexport default function Floor({polygon}) {\n    return <polygon points={polygon} fill=\"#ffffaa\" stroke=\"steelblue\" />;\n}\n///add memo\n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points, XY } from \"../interfaces\";\nimport {  getAllPoints } from \"../utils\";\n\nfunction Point({\n    point,\n    visible,\n}: {\n    point: any;\n    visible: boolean;\n}) {\n\n    const { __rooms } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    \n    const roomIndex = rooms.findIndex(room => room.id === point.room)\n\n    if (!visible) {\n        return null;\n    }\n\n    const dragging = (e: any, dnd: DraggableData) => {\n\n        rooms[roomIndex].points[point.i].x = point.x + dnd.deltaX\n        rooms[roomIndex].points[point.i].y = point.y + dnd.deltaY\n\n        setRooms([...rooms])\n    };\n\n    const dragEnd = () => {\n\n        let allPoints = getAllPoints(rooms)\n\n        console.log(allPoints)\n\n        allPoints.map(otherPoint => {\n            console.log(otherPoint.i)\n            console.log(otherPoint.room)\n            if (otherPoint.room !== point.room || otherPoint.i !== point.i) {\n                if (Math.abs(point.absX - otherPoint.absX) < 16) {\n                    rooms[roomIndex].points[point.i].x = otherPoint.absX - point.offsetX\n                }\n                if (Math.abs(point.absY - otherPoint.absY) < 16) {\n                    rooms[roomIndex].points[point.i].y = otherPoint.absY - point.offsetY\n                }\n                \n            }\n        })\n        setRooms([...rooms])\n    };\n\n    return (\n        <DraggableCore\n            handle=\".corner\"\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <g>\n                <circle\n                    className=\"corner\"\n                    cx={point.x}\n                    cy={point.y}\n                    r={16}\n                    fill={\"white\"}\n                    stroke={\"#38a0f9\"}\n                    strokeWidth={4}\n                />\n                <text\n                    x={point.x}\n                    y={point.y}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    pointerEvents=\"none\"\n                    fill=\"grey\"\n                >\n                    {point.i}\n                </text>\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Point;\n","import React, { useState, useContext } from \"react\";\nimport { line } from \"d3-shape\";\nimport { DraggableCore } from \"react-draggable\";\nimport { Points } from './../interfaces'\nimport { RoomContext } from './../RoomContext'\nimport Point from \"./Point\";\nimport { getAllPoints } from \"../utils\";\n\nexport default function Segment({\n    pathPoints,\n    visible,\n    segmentIndex,\n}: {\n    pathPoints: any,\n    visible: boolean,\n    segmentIndex: number\n}) {\n\n    const { __quickMenuPosition, __quickMenuState, __selectedPathPoints, __rooms } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n\n    const [isDragging, setIsDragging] = useState(false)\n\n    let [a, b] = pathPoints;\n\n    const roomIndex = rooms.findIndex(room => room.id === a.room)\n\n    let data = [[a.x, a.y], [b.x, b.y]]\n\n    let path = line()\n        .x((d) => d[0])\n        .y((d) => d[1])\n\n    const dragging = (e, dnd) => {\n\n        setIsDragging(true)\n\n        a.x += dnd.deltaX\n        a.y += dnd.deltaY\n\n        b.x += dnd.deltaX\n        b.y += dnd.deltaY\n\n        rooms[roomIndex].points[a.i].x = a.x\n        rooms[roomIndex].points[a.i].y = a.y\n\n        rooms[roomIndex].points[b.i].x = b.x\n        rooms[roomIndex].points[b.i].y = b.y\n\n        setRooms([...rooms])\n    }\n\n    const dragEnd = (e, dnd) => {\n\n        if (!isDragging) {\n            segmentClicked(e)\n            return\n        }\n        setIsDragging(false)\n\n        let allPoints = getAllPoints(rooms)\n\n        pathPoints.forEach(pathPoint => {\n            allPoints.forEach(point => {\n                if (pathPoint.room !== point.room) {\n                    if (Math.abs(pathPoint.absX - point.absX) <= 16) {\n                        rooms[roomIndex].points[pathPoint.i].x = point.absX - pathPoint.offsetX\n                    }\n                    if (Math.abs(pathPoint.absY - point.absY) <= 16) {\n                        rooms[roomIndex].points[pathPoint.i].y = point.absY - pathPoint.offsetY\n                    }\n                }\n            });\n        });\n        setRooms([...rooms])\n    }\n\n    const segmentClicked = e => {\n        console.log(e.type)\n        e.preventDefault()\n\n        let x\n        let y\n\n        if (e.type === 'mouseup') {\n            x = e.clientX\n            y = e.clientY\n        } else {\n            x = e.touches[0].pageX\n            y = e.touches[0].pageY\n        }\n\n\n        setQuickMenuPosition({ x, y })\n        setQuickMenuState(prev => !prev)\n        setSelectedPathPoints(pathPoints)\n    }\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <DraggableCore\n            handle=\".segment\"\n            //onStart={() => setIsDragging(true)}\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <path\n                d={path(data)}\n                id={a.i + '.' + b.i}\n                className=\"segment\"\n                strokeWidth={20}\n                stroke=\"#77cfff\"\n                opacity={0.8}\n            //onClick={e => segmentClicked(e)}\n            />\n        </DraggableCore>\n    );\n}\n","import React from \"react\";\n\nfunction Size({pathPoints, visible}) {\n    const [a, b] = pathPoints;\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n\n    var c = Math.round(Math.floor(Math.sqrt(dx * dx + dy * dy)/5)*5)\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <text style={{pointerEvents:'none', fill:'#404040'}}>\n            <textPath startOffset=\"45%\" xlinkHref={\"#\" + a.i + '.' + b.i}>\n                {c}\n            </textPath>\n        </text>\n    );\n}\n\nexport default Size;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { getPath, getPolygon, getAllPoints } from \"./../utils\";\nimport Floor from \"./Floor\";\nimport Point from \"./Point\";\nimport Segment from \"./Segment\";\nimport Size from \"./Size\";\n\nfunction Room({\n    isSelected,\n    room,\n    i\n}: {\n    isSelected: boolean;\n    room: any;\n    i: number\n}) {\n\n    const { __rooms, __selectedRoom } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n\n    const deleteRoom = (e: any) => {\n        if (isSelected) {\n            if (e.keyCode === 8) {\n                setRooms((rooms: any) => rooms.filter((el: any) => el.id !== room.id));\n            }\n        }\n    };\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        e.preventDefault()\n\n        const newRooms = [...rooms]\n        newRooms[i].x += dnd.deltaX\n        newRooms[i].y += dnd.deltaY\n\n        setRooms(newRooms)\n    };\n\n    const dragEnded = (e, dnd) => {\n\n        const allPoints = getAllPoints(rooms)\n\n        room.getPoints().forEach(point => {\n            console.log(point.room)\n            allPoints.forEach(otherPoint => {\n                console.log(otherPoint.room)\n\n                let dx = Math.abs(point.absX - otherPoint.absX)\n                let dy = Math.abs(point.absY - otherPoint.absY)\n\n                if (point.room !== otherPoint.room) {\n                    if (dx <= 16) {\n                        rooms[i].points[point.i].x = otherPoint.absX - point.offsetX\n                    }\n                    if (dy <= 16) {\n                        rooms[i].points[point.i].y = otherPoint.absY - point.offsetY\n                    }\n                }\n            })\n        })\n        setRooms([...rooms])\n    }\n\n    return (\n        <DraggableCore\n            handle=\".room\"\n            cancel=\".corner, .segment\"\n            disabled={!isSelected}\n            onStop={dragEnded}\n            onDrag={dragging}\n        >\n            <g\n                className={\"room\"}\n                id={room.id}\n                transform={`translate(${room.x} ${room.y})`}\n                onClick={() => {\n                    setSelectedRoom(room.id);\n                }}\n                onKeyDown={deleteRoom}\n                tabIndex={-1}\n                style={{ outline: 0 }}\n            >\n                <Floor\n                    polygon={getPolygon(room.getPoints())}\n                />\n\n                {getPath(room.getPoints()).map((pathPoints, index) => (\n                    <Segment\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                        segmentIndex={index}\n                    />\n                ))}\n\n                {room.getPoints().map((point, index) => (\n                    <Point\n                        key={index}\n                        point={point}\n                        visible={isSelected}\n                    />\n                ))}\n                {getPath(room.getPoints()).map((pathPoints, index) => (\n                    <Size\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                    />\n                ))}\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Room;\n\n","import React, { useState, useContext } from \"react\";\nimport Background from \"./Background\";\nimport Room from \"./Room\";\nimport { RoomContext } from \"../RoomContext\";\n\nexport default function Plan() {\n\n    const { __rooms, __selectedRoom } = useContext(RoomContext)\n\n    const [rooms] = __rooms;\n    const [selectedRoom] = __selectedRoom;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return (\n        <svg width={width} height={height}>\n            <Background\n                width={width}\n                height={height}\n            />\n\n            {rooms\n                .sort((a, b) => {\n                    const c = (a.id === selectedRoom)\n                    const d = (b.id === selectedRoom)\n                    return (c === d) ? 0 : c ? 1 : - 1\n                })\n                .map((room, i) => {\n                    return (\n                        <Room\n                            key={room.id}\n                            isSelected={selectedRoom === room.id ? true : false}\n                            room={room}\n                            i={i}\n                        />\n                    );\n                })}\n        </svg>\n    );\n}\n","import React, { useContext } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nimport { addCorner } from './../../utils'\nimport { RoomContext } from './../../RoomContext'\n\nconst QuickMenu = () => {\n\n    const {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedPathPoints,\n        __rooms,\n        __selectedRoom\n    } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n\n    const handleClose = (e) => {\n        setQuickMenuState(false)\n        setQuickMenuPosition(null)\n    }\n\n    const addDoor = e => {\n        console.log('selectedPathPoints', selectedPathPoints)\n        handleClose(e)\n    }\n\n\n    return (\n        <Menu\n            id=\"quickMenu\"\n            transitionDuration={{ enter: 0, exit: 0 }}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                quickMenuPosition !== null\n                    ? { top: quickMenuPosition.y, left: quickMenuPosition.x }\n                    : undefined\n            }\n            open={quickMenuState}\n            onClose={handleClose}\n        >\n            <MenuItem\n                onClick={(e) => {\n                    const newPoints = addCorner(e, selectedPathPoints)\n                    const index1 = selectedPathPoints[0].i\n                    const index2 = selectedPathPoints[1].i\n                    const newRooms = [...rooms]\n                    const index = newRooms.findIndex(room => room.id === selectedRoom)\n                    newRooms[index] = { ... newRooms[index], points : newRooms[index].points.splice(index1 + 1, 0, ...newPoints)}\n                    setRooms(newRooms)\n\n                    handleClose(e)\n                }}>\n                new corner\n            </MenuItem>\n\n            <MenuItem onClick={addDoor}>new door</MenuItem>\n        </Menu>\n    )\n}\n\nexport default QuickMenu\n","import React, { useState } from \"react\";\nimport Plan from \"./components/Plan\";\nimport \"./App.css\";\nimport QuickMenu from './components/UI/QuickMenu'\nimport { RoomContext } from './RoomContext'\n\nfunction App() {\n\n    const __quickMenuPosition = useState(null)\n    const __quickMenuState = useState(false)\n    const __rooms = useState([])\n    const __selectedRoom = useState(null)\n    const __selectedPathPoints = useState(null)\n\n    const CTX = {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedRoom,\n        __rooms,\n        __selectedPathPoints\n    }\n    \n\n    return (\n        <div\n            className=\"App\"\n            style={{ overscrollBehavior: \"none\" }}\n            onContextMenu={e => e.preventDefault()}\n        >\n            <RoomContext.Provider value={CTX}>\n                <Plan/>\n                <QuickMenu/>\n            </RoomContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}