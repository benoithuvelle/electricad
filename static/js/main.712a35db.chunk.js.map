{"version":3,"sources":["components/Background.tsx","utils.ts","components/Floor.tsx","components/Point.tsx","components/Segment.tsx","components/Size.tsx","components/Room.tsx","components/Plan.tsx","components/UI/QuickMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Background","setSelectedRoom","setRooms","rooms","width","height","id","fill","onDoubleClick","e","window","prompt","find","room","alert","coords","clientX","clientY","points","onClick","getPolygon","map","point","join","getPath","reduce","acc","current","i","XY","push","length","getAllPointsButThisRoom","roomIndex","filter","_","curr","dx","dy","getPointsAbsolutePosition","getAllPointsAbsolutePosition","roomPoints","compareRoomPoints","forEach","allPoints","path","console","log","a","b","equation","ax","ay","bx","by","m","offset","isPointInPath","Floor","polygon","stroke","Point","pointIndex","setPoints","visible","x","y","handle","onDrag","dnd","newPoints","deltaX","deltaY","onStop","otherPoint","Math","abs","className","cx","cy","r","strokeWidth","textAnchor","alignmentBaseline","pointerEvents","Segment","pathPoints","segmentIndex","setQuickMenuState","setQuickMenuPosition","useState","isDragging","setIsDragging","data","line","d","segmentClicked","preventDefault","prev","newPathPoints","el","opacity","Size","c","round","floor","sqrt","style","startOffset","xlinkHref","Room","isSelected","defaultPoints","useEffect","updateRoom","index","slice","cancel","disabled","allOtherPoints","pointA","pointB","roomUpdate","transform","onKeyDown","keyCode","tabIndex","outline","key","Plan","selectedRoom","innerWidth","innerHeight","sort","QuickMenu","quickMenuState","quickMenuPosition","handleClose","Menu","transitionDuration","enter","exit","anchorReference","anchorPosition","top","left","undefined","open","onClose","MenuItem","App","overscrollBehavior","onContextMenu","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.712a35db.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Background({\n    setSelectedRoom,\n    setRooms,\n    rooms,\n    width,\n    height,\n}: {\n    setSelectedRoom: any;\n    setRooms: any;\n    rooms: any;\n    width: number;\n    height: number;\n}) {\n    const addRoom = (e: any) => {\n        const id = window.prompt(\"Dénomination de la pièce\");\n\n        if (id === '' || id === null) return\n\n        if (rooms.find((room) => room.id === id)) {\n            alert(`Une pièce nommée ${id} existe déjà. Création annulée !!!`);\n            return;\n        }\n\n        const room = {\n            id: id,\n            coords: [e.clientX - 75, e.clientY - 75],\n            points: [[0, 0], [0, 150], [150, 150], [150, 0]],\n        };\n        \n        setRooms([...rooms, room]);\n        setSelectedRoom(room.id);\n    };\n\n    return (\n        <rect\n            id=\"background\"\n            width={width}\n            height={height}\n            fill=\"#38a0f9\"\n            onDoubleClick={addRoom}\n            onClick={() => setSelectedRoom(null)}\n        />\n    );\n}\n","import { Path, Points } from \"./interfaces\";\nimport { Room } from './interfaces'\nimport Point from \"./components/Point\";\n\nexport function getPolygon(points: Points) {\n    return points.map((point) => [point[0], point[1]].join(\" \"));\n}\n\nexport function getPath(points: Points) {\n    return points.reduce((acc, current, i) => {\n        acc[i] = [{ XY: current, i: i }];\n        if (i > 0) {\n\n            acc[i - 1].push({ XY: current, i: i })\n        }\n        if (i === points.length - 1) acc[i].push(acc[0][0]);\n        return acc;\n    }, []);\n}\n\n\nexport function getAllPointsButThisRoom(rooms, roomIndex) {\n    let array = rooms\n        .filter((_, i) => i !== roomIndex)\n        .reduce((acc, curr, i) => {\n            curr.points.map(point => {\n                point.dx = curr.coords[0]\n                point.dy = curr.coords[1]\n                acc.push(point)\n            })\n            return acc\n        }, [])\n    return array\n}\n\nexport function getPointsAbsolutePosition(room) {\n    let array = room.points\n        .map(point => {\n            //console.log(point)\n            point.dx = room.coords[0]\n            point.dy = room.coords[1]\n            return point\n        })\n    return array\n}\n\nexport function getAllPointsAbsolutePosition(rooms) {\n    let array = rooms.reduce((acc, curr, i) => {\n        const roomPoints = getPointsAbsolutePosition(curr)\n        acc.push(...roomPoints)\n        return acc\n    }, [])\n    return array\n}\n\nexport function getThisRoomPoints(room : Room): Points {\n    let array = room.points.reduce((acc, curr, i) => {\n        acc[i] = {\n            x : curr[0],\n            y : curr[1],\n            dx : curr[0] + room.coords[0],\n            dy : curr[1] + room.coords[1],\n            i : i\n        }\n    }, [])\n    return array\n}\n\nexport function compareRoomPoints(rooms) {\n    rooms.forEach((room, i) => {\n        const allPoints = getAllPointsButThisRoom(rooms, i)\n        let paths = getPath(room.points)\n        paths.forEach(path => {\n            allPoints.forEach(point => {\n                console.log(point)\n                isPointInPath(path, point)\n            });\n        });\n    });\n}\n\nexport function isPointInPath(path, point) {\n    const [a, b] = path\n\n    console.log(a)\n\n    const ax = a.XY[0] + a.XY.dx\n    const ay = a.XY[1] + a.XY.dy\n    const bx = b.XY[0] + b.XY.dx\n    const by = b.XY[1] + b.XY.dy\n\n    const dx = bx - ax\n    const dy = by - ay\n\n    const m = dy/dx\n\n    // ay = m * ax + offset  \n\n    const offset = ay - m * ax\n\n    let equation\n    if (dx === 0) { //verticale\n        console.log('droite verticale')\n        equation = ax - (point[0] + point.dx)\n    } else if (dy === 0) { //horizontale\n        equation = ay - (point[1] + point.dy)\n    } else {\n        equation = ay - m * ax - offset\n    }\n    console.log(equation)\n    console.log(point[1] + point.dx - m * (point[0] + point.dy) - offset)\n\n    if (point[1] + point.dx - m * (point[0] + point.dy) - offset === equation) {\n        console.log(\"coucou petite peruche\")\n    }\n\n\n    return equation\n\n}\n\n","import React from \"react\";\n\nexport default function Floor({polygon}) {\n    return <polygon points={polygon} fill=\"#ffffaa\" stroke=\"steelblue\" />;\n}\n///add memo\n","import React from \"react\";\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points, XY } from \"../interfaces\";\nimport { getPointsAbsolutePosition, getAllPointsAbsolutePosition } from \"../utils\";\n\nfunction Point({\n    coords,\n    point,\n    pointIndex,\n    points,\n    setPoints,\n    visible,\n    rooms,\n}: {\n    coords: any;\n    point: any;\n    pointIndex: number;\n    points: any;\n    setPoints: any;\n    visible: boolean;\n    rooms: any;\n}) {\n    if (!visible) {\n        return null;\n    }\n\n    const x = point[0];\n    const y = point[1];\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        const newPoints = [...points];\n        newPoints[pointIndex] = [x + dnd.deltaX, y + dnd.deltaY];\n        setPoints(newPoints);\n    };\n\n    const dragEnd = () => {\n\n        let newPoints = [ ... points ]\n\n        let allPoints = getAllPointsAbsolutePosition(rooms)\n\n        allPoints.map(otherPoint => {\n            if (otherPoint !== point) {\n                if (Math.abs((point[0] + coords[0]) - (otherPoint[0] + otherPoint.dx)) < 10) {\n                    newPoints[pointIndex][0] = otherPoint[0] + otherPoint.dx - coords[0]\n                }\n                if (Math.abs((point[1] + coords[1]) - (otherPoint[1] + otherPoint.dy)) < 10) {\n                    console.log('match')\n                    newPoints[pointIndex][1] = otherPoint[1] + otherPoint.dy - coords[1]\n                }\n            }\n        })\n        setPoints(newPoints)\n    };\n\n    return (\n        <DraggableCore\n            handle=\".corner\"\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <g>\n                <circle\n                    className=\"corner\"\n                    cx={x}\n                    cy={y}\n                    r={16}\n                    fill={\"white\"}\n                    stroke={\"#38a0f9\"}\n                    strokeWidth={4}\n                />\n                <text\n                    x={x}\n                    y={y}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    pointerEvents=\"none\"\n                    fill=\"grey\"\n                >\n                    {2}\n                </text>\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Point;\n","import React, { useState } from \"react\";\nimport { line } from \"d3-shape\";\nimport { DraggableCore } from \"react-draggable\";\nimport { Points } from './../interfaces'\nimport { getAllPointsAbsolutePosition } from \"../utils\";\n\nexport default function Segment({\n    pathPoints,\n    visible,\n    segmentIndex,\n    setPoints,\n    points,\n    rooms,\n    setQuickMenuState,\n    setQuickMenuPosition,\n}: {\n    pathPoints: any,\n    visible: boolean,\n    segmentIndex: number\n    setPoints: any,\n    points: any,\n    rooms: any,\n    setQuickMenuState: any,\n    setQuickMenuPosition: any,\n}) {\n\n    const [isDragging, setIsDragging] = useState(false)\n\n    ////////console.log(pathPoints)\n    let [a, b] = pathPoints;\n\n    let data = [a.XY, b.XY]\n\n    ////////console.log(a)\n\n    let [ax, ay] = a.XY;\n    let [bx, by] = b.XY;\n\n    //////////console.log(ax)\n\n    let path = line()\n        .x((d) => d[0])\n        .y((d) => d[1])\n\n    const dragging = (e, dnd) => {\n\n        setIsDragging(true)\n\n        const newPathPoints = [...pathPoints]\n        newPathPoints[0] = [ax + dnd.deltaX, ay + dnd.deltaY]\n        newPathPoints[1] = [bx + dnd.deltaX, by + dnd.deltaY]\n\n        const newPoints = [...points]\n\n        newPoints[a.i] = newPathPoints[0]\n        newPoints[b.i] = newPathPoints[1]\n\n        setPoints([...newPoints])\n    }\n\n    const dragEnd = (e, dnd) => {\n\n        if (!isDragging) {\n            segmentClicked(e)\n            return\n        }\n        setIsDragging(false)\n\n        let allPoints = getAllPointsAbsolutePosition(rooms)\n\n        let newPoints = [...points]\n        //////console.log(newPoints)\n\n        allPoints.map(el => {\n\n            if (Math.abs((el[0] + el.dx) - (ax + a.XY.dx)) <= 16) {\n                newPoints[a.i][0] = el.dx + el[0] - a.XY.dx\n                //////console.log('match')\n            }\n            if (Math.abs((el[1] + el.dy) - (ay + a.XY.dy)) <= 16) {\n                newPoints[a.i][1] = el.dy + el[1] - a.XY.dy\n                //////console.log('match')\n\n            }\n            if (Math.abs((el[0] + el.dx) - (bx + b.XY.dx)) <= 16) {\n                newPoints[b.i][0] = el.dx + el[0] - b.XY.dx\n                //////console.log('match')\n\n            }\n            if (Math.abs((el[1] + el.dy) - (by + b.XY.dy)) <= 16) {\n                newPoints[b.i][1] = el.dy + el[1] - b.XY.dy\n                //////console.log('match')\n\n            }\n            setPoints([...newPoints])\n        })\n    }\n\n    const addPoint = (e) => {\n\n        e.persist()\n        //////////////console.log(e.target.getBoundingClientRect())\n        //////////////console.log(e.clientX)\n        ////////////console.log(e.target)\n\n        let box = e.target.getBoundingClientRect()\n        ////////////console.log(box.left)\n        ////////////console.log(e.clientX)\n        let pointer = [e.clientX, e.clientY]\n\n        let newPoint = []\n\n        newPoint[0] = pathPoints[0].XY[0] < pathPoints[1].XY[0] ? pointer[0] - box.left + pathPoints[0].XY[0] : pointer[0] - box.left + pathPoints[1].XY[0]\n        // y = mx + b\n\n        let a = pathPoints[0]\n        let b = pathPoints[1]\n\n        //////////console.log(a.id.split('.')[2],b.id.split('.')[2])\n\n        let dx = a.XY[0] - b.XY[0]\n        let dy = a.XY[1] - b.XY[1]\n\n        let m = dy / dx\n        let p = a.XY[1] - m * a.XY[0]\n\n        //////////////console.log(m)\n\n        if (m === 0) {\n            //////////////console.log('ligne horizontale')\n            newPoint[1] = a.XY[1]\n        }\n\n        else if (m === Infinity || m === -Infinity) {\n            //////////////console.log('ligne verticale')\n            newPoint[0] = a.XY[0]\n            newPoint[1] = a.XY[1] < b.XY[1] ? Math.abs(pointer[1] - box.top + a.XY[1]) : Math.abs(pointer[1] - box.top + b.XY[1])\n        }\n\n        else {\n            newPoint[1] = m * newPoint[0] + p //+ (a.XY[0])\n            //point.y = m * point.x + p\n        }\n\n        //point.id = room.id + '.corner.' + room.points.length + 1\n\n        let index1 = a.i\n        let index2 = b.i\n\n        points.splice(index1 + 1, 0, newPoint, newPoint)\n\n        setPoints([...points])\n        //////console.log(points)\n    }\n\n    const segmentClicked = e => {\n        \n        e.preventDefault()\n        setQuickMenuPosition({x : e.clientX, y : e.clientY})\n        setQuickMenuState(prev => !prev)\n    }\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <DraggableCore\n            handle=\".segment\"\n            //onStart={() => setIsDragging(true)}\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <path\n                d={path(data)}\n                id={a.i + '.' + b.i}\n                className=\"segment\"\n                strokeWidth={20}\n                stroke=\"#77cfff\"\n                opacity={0.8}\n                //onDoubleClick={addPoint}\n                //onClick={segmentClicked}\n            />\n        </DraggableCore>\n    );\n}\n","import React from \"react\";\n\nfunction Size({pathPoints, visible}) {\n    const [a, b] = pathPoints;\n    const [ax, ay] = a.XY;\n    const [bx, by] = b.XY;\n\n    var dx = ax - bx;\n    var dy = ay - by;\n\n    var c = Math.round(Math.floor(Math.sqrt(dx * dx + dy * dy)/5)*5)\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <text style={{pointerEvents:'none', fill:'#404040'}}>\n            <textPath startOffset=\"45%\" xlinkHref={\"#\" + a.i + '.' + b.i}>\n                {c}\n            </textPath>\n        </text>\n    );\n}\n\nexport default Size;\n","import React, { useState, useEffect } from \"react\";\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points } from \"../interfaces\";\nimport { getPath, getPolygon, getAllPointsButThisRoom, getPointsAbsolutePosition, compareRoomPoints } from \"./../utils\";\nimport Floor from \"./Floor\";\nimport Point from \"./Point\";\nimport Segment from \"./Segment\";\nimport Size from \"./Size\";\n\nfunction Room({\n    setRooms,\n    setSelectedRoom,\n    isSelected,\n    roomIndex,\n    id,\n    coords,\n    room,\n    rooms,\n    points:defaultPoints,\n    setQuickMenuState,\n    setQuickMenuPosition,\n}: {\n    setRooms: any;\n    setSelectedRoom: any;\n    isSelected: boolean;\n    roomIndex: number;\n    id: string;\n    coords: any;\n    room: any;\n    rooms: any;\n    points: Points;\n    setQuickMenuState: any;\n    setQuickMenuPosition: any;\n}) {\n\n    const [points, setPoints] = useState<Points>(defaultPoints);\n\n    useEffect(() => {\n        updateRoom(room, roomIndex)\n    }, [points])\n\n    \n\n    const deleteRoom = (e: any) => {\n        if (isSelected) {\n            if (e.keyCode === 8) {\n                setRooms((rooms: any) => rooms.filter((el: any) => el.id !== id));\n            }\n        }\n    };\n\n    const updateRoom = (room: any, index: number) => {\n        ////console.log(' room updating')\n        setRooms((rooms: any) => [\n            ...rooms.slice(0, index),\n            { ...room, points : points },\n            ...rooms.slice(index + 1),\n        ]);\n    };\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        e.preventDefault()\n\n        coords[0] += dnd.deltaX\n        coords[1] += dnd.deltaY\n\n        updateRoom(room, roomIndex)\n    };\n\n    const dragEnded = (e, dnd) => {\n\n        const roomPoints = getPointsAbsolutePosition(room)\n\n        const allOtherPoints = getAllPointsButThisRoom(rooms, roomIndex)\n        let newPoints = roomPoints.map(pointA => {\n            allOtherPoints.map(pointB => {\n                \n                let a = pointA[0] + pointA.dx\n                let b = pointB[0] + pointB.dx\n                let dx = Math.abs(a - b)\n                if (dx <= 10) {\n                    pointA[0] = b - pointA.dx\n                }\n            })\n            allOtherPoints.map(pointB => {\n                let a = pointA[1] + pointA.dy\n                let b = pointB[1] + pointB.dy\n                let dy = Math.abs(a - b)\n                if (dy <= 10) {\n                    pointA[1] = b - pointA.dy\n                }\n            })\n            return pointA\n        })\n\n        const roomUpdate = { ...room, points: newPoints}\n        updateRoom(roomUpdate, roomIndex)\n\n        compareRoomPoints(rooms)\n    }\n\n    return (\n        <DraggableCore\n            handle=\".room\"\n            cancel=\".corner, .segment\"\n            disabled={!isSelected}\n            onStop={dragEnded}\n            onDrag={dragging}\n        >\n            <g\n                className={\"room\"}\n                id={id}\n                transform={`translate(${coords[0]} ${coords[1]})`}\n                onClick={() => {\n                    setSelectedRoom(id);\n                }}\n                onKeyDown={deleteRoom}\n                tabIndex={-1}\n                style={{ outline: 0 }}\n            >\n                <Floor\n                    polygon={getPolygon(points)}\n                />\n\n                {getPath(points).map((pathPoints, index) => (\n                    <Segment\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                        segmentIndex={index}\n                        setPoints={setPoints}\n                        points={points}\n                        rooms={rooms}\n                        setQuickMenuState={setQuickMenuState}\n                        setQuickMenuPosition={setQuickMenuPosition}\n                    />\n                ))}\n\n                {points.map((point, index) => (\n                    <Point\n                        coords={coords}\n                        key={index}\n                        point={point}\n                        pointIndex={index}\n                        points={points}\n                        setPoints={setPoints}\n                        visible={isSelected}\n                        rooms={rooms}\n                    />\n                ))}\n                {getPath(points).map((pathPoints, index) => (\n                    <Size\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                    />\n                ))}\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Room;\n// export default React.memo(Room,\n//     (prevProps, nextProps) => {\n//         if (prevProps.room === nextProps.room && prevProps.isSelected === nextProps.isSelected) {\n//             return true;\n//         }\n//         return false;\n//     })\n","import React, {useState} from \"react\";\nimport Background from \"./Background\";\nimport Room from \"./Room\";\n\nexport default function Plan({ setQuickMenuState, setQuickMenuPosition }) {\n    const [rooms, setRooms] = useState([]);\n    const [selectedRoom, setSelectedRoom] = useState(null);\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // Array.from(document.getElementsByTagName(\"circle\")).map((e) => { return e.getBoundingClientRect()  })\n\n    return (\n        <svg width={width} height={height}>\n            <Background\n                width={width}\n                height={height}\n                setSelectedRoom={setSelectedRoom}\n                setRooms={setRooms}\n                rooms={rooms}\n            />\n\n            \n\n            {rooms\n            .sort((a,b) => {\n                const c = (a.id === selectedRoom)\n                const d = (b.id === selectedRoom)\n                return (c === d) ? 0 : c ? 1 : - 1\n            })\n            .map((room, i) => {\n                return (\n                    <Room\n                        key={room.id}\n                        roomIndex={i}\n                        id={room.id}\n                        coords={room.coords}\n                        isSelected={selectedRoom === room.id ? true : false}\n                        setSelectedRoom={setSelectedRoom}\n                        rooms={rooms}\n                        setRooms={setRooms}\n                        room={room}\n                        points={room.points}\n                        setQuickMenuState={setQuickMenuState}\n                        setQuickMenuPosition={setQuickMenuPosition}\n                    />\n                );\n            })}\n        </svg>\n    );\n}\n","import React from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\n\nfunction QuickMenu({ quickMenuState, quickMenuPosition, setQuickMenuState, setQuickMenuPosition }) {\n\n    const handleClose = (e) => {\n        setQuickMenuState(false)\n        setQuickMenuPosition(null)\n    }\n\n    return (\n        <Menu\n            id=\"quickMenu\"\n            transitionDuration={{ enter: 0, exit: 0 }}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                quickMenuPosition !== null \n                    ? { top: quickMenuPosition.y, left: quickMenuPosition.x }\n                    : undefined\n            }\n            open={quickMenuState}\n            onClose={handleClose}\n        >\n            {/* <MenuItem onClick={(e) => { addPoint(e); handleClose(e);}}>Door</MenuItem> */}\n            <MenuItem onClick={handleClose}>Set</MenuItem>\n            <MenuItem onClick={handleClose}>{quickMenuPosition ? quickMenuPosition.x : 'no'}</MenuItem>\n            <MenuItem onClick={handleClose}>Profile</MenuItem>\n        </Menu>\n    )\n}\n\nexport default QuickMenu\n","import React, { useState } from \"react\";\nimport Plan from \"./components/Plan\";\nimport \"./App.css\";\nimport QuickMenu from './components/UI/QuickMenu'\n\nfunction App() {\n\n    const [quickMenuPosition, setQuickMenuPosition] = useState(null)\n    const [quickMenuState, setQuickMenuState] = useState(false)\n\n    return (\n        <div\n            className=\"App\"\n            style={{ overscrollBehavior: \"none\" }}\n            onContextMenu={e => e.preventDefault()}\n        >\n            <Plan\n                setQuickMenuState={setQuickMenuState}\n                setQuickMenuPosition={setQuickMenuPosition}\n            />\n            <QuickMenu\n                quickMenuState={quickMenuState}\n                quickMenuPosition={quickMenuPosition}\n                setQuickMenuState={setQuickMenuState}\n                setQuickMenuPosition={setQuickMenuPosition}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}