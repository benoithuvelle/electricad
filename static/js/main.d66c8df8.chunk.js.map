{"version":3,"sources":["RoomContext.tsx","components/Background.tsx","utils.ts","components/Floor.tsx","components/Point.tsx","components/Segment.tsx","components/Size.tsx","components/Door.tsx","components/Room.tsx","components/Plan.tsx","components/UI/QuickMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoomContext","createContext","Background","width","height","useContext","__selectedRoom","__rooms","rooms","setRooms","setSelectedRoom","addRoom","e","id","window","prompt","find","room","alert","x","clientX","y","clientY","points","getPoints","this","reduce","acc","curr","i","absX","absY","offsetX","offsetY","doors","style","tabIndex","fill","onDoubleClick","onClick","onKeyDown","keyCode","getPath","current","push","length","getAllPoints","roomPoints","getPointCoords","clickCoords","pathPoints","a","b","console","log","m","p","isFinite","project","atob","len","dot","t","Math","min","max","point","left","Floor","polygon","stroke","strokeWidth","Point","visible","roomIndex","findIndex","handle","onDrag","dnd","deltaX","deltaY","onStop","allPoints","map","otherPoint","abs","className","cx","cy","r","textAnchor","alignmentBaseline","pointerEvents","Segment","segmentIndex","__quickMenuPosition","__quickMenuState","__selectedPathPoints","__pointer","__pathNode","setQuickMenuPosition","setQuickMenuState","setSelectedPathPoints","setPointer","setPathNode","useState","isDragging","setIsDragging","data","path","line","d","segmentClicked","preventDefault","type","touches","pageX","pageY","prev","target","forEach","pathPoint","cancel","visibility","strokeLinecap","strokeLinejoin","opacity","Size","dx","dy","c","round","floor","sqrt","startOffset","xlinkHref","Door","door","pointsIds","doorCenter","split","coords","newDoorCenter","newPoint","Room","isSelected","disabled","newRooms","transform","filter","el","outline","join","index","key","Plan","__doors","selectedRoom","innerWidth","innerHeight","xmlns","xmlnsXlink","sort","QuickMenu","quickMenuPosition","quickMenuState","selectedPathPoints","pointer","handleClose","Menu","transitionDuration","enter","exit","anchorReference","anchorPosition","top","undefined","open","onClose","MenuItem","persist","point1","point2","splice","App","CTX","overscrollBehavior","onContextMenu","Provider","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d66c8df8.chunk.js","sourcesContent":["import { createContext, useState } from 'react'\n\nexport const RoomContext = createContext(null) \n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\n\nexport default function Background({\n    width,\n    height,\n}: {\n    width: number;\n    height: number;\n}) {\n\n    const { __selectedRoom, __rooms } = useContext(RoomContext)\n\n    const [rooms, setRooms] = __rooms\n    const [_, setSelectedRoom] = __selectedRoom\n\n    const addRoom = (e: any) => {\n        const id = window.prompt(\"Dénomination de la pièce\");\n\n        if (id === '' || id === null) return\n\n        if (rooms.find((room) => room.id === id)) {\n            alert(`Une pièce nommée ${id} existe déjà. Création annulée !!!`);\n            return;\n        }\n\n        const room = {\n            id: id,\n            x : e.clientX ? e.clientX - 75 : width/2,\n            y : e.clientY ? e.clientY - 75 : height/2,\n            points: [\n                {x : 0, y : 0},\n                {x : 0, y : 200},\n                {x : 200, y : 200},\n                {x : 200, y : 0},\n            ],\n            getPoints() {\n                return this.points.reduce((acc, curr, i) => {\n                    acc[i] = {\n                        x : curr.x,\n                        y : curr.y,\n                        absX : curr.x + this.x,\n                        absY : curr.y + this.y,\n                        offsetX : this.x,\n                        offsetY : this.y,\n                        i,\n                        room : id,\n                        id : `${this.id}.${i}`\n                    }\n                    return acc\n                }, [])\n            },\n            doors : []\n        };\n\n        setRooms([...rooms, room]);\n        setSelectedRoom(room.id);\n    }\n\n    const keyHandler = e => {\n        if (e.keyCode === 78) {\n            addRoom(e)\n        }\n    }\n\n    return (\n        <rect\n            style={{'outline':'none'}}\n            tabIndex={-1}\n            id=\"background\"\n            width={width}\n            height={height}\n            fill=\"#38a0f9\"\n            onDoubleClick={addRoom}\n            onClick={() => setSelectedRoom(null)}\n            onKeyDown={keyHandler}\n        />\n    );\n}\n","import { Path, Points } from \"./interfaces\";\nimport { Room } from './interfaces'\nimport Point from \"./components/Point\";\n\nexport function getPolygon(points) {\n    return points.map((point) => [point.x, point.y].join(\" \"));\n}\n\nexport function getPath(points) {\n    return points.reduce((acc, current, i) => {\n        acc[i] = [\n            current];\n        if (i > 0) {\n            acc[i - 1].push(current)\n        }\n        if (i === points.length - 1) acc[i].push(acc[0][0]);\n        return acc;\n    }, []);\n}\n\nexport function getAllPoints(rooms) {\n    let array = rooms.reduce((acc, curr, i) => {\n        const roomPoints = curr.getPoints()\n        acc.push(...roomPoints)\n        return acc\n    }, [])\n    return array\n}\n\nexport const getPointCoords = (clickCoords, pathPoints) => {   // y = m*x + p \n    const [a, b] = pathPoints\n    let [x, y] = clickCoords\n\n    console.log('x', x)\n    console.log('y', y)\n\n    const m = (b.y - a.y) / (b.x - a.x)\n    console.log('m',m)\n    const p = a.y - m*a.x\n\n    if (m === 0) {\n        y = a.y\n    } \n    else if (!isFinite(m)) {\n        x = a.x\n    } else \n        y = m*x + p\n\n    return { x, y }\n\n}\n\nexport function getY(point, pathPoints) {\n\n    const [a,b] = pathPoints\n    // y = m * x + p\n    const dx = b.x - a.x\n    const dy = b.y - a.y\n    const m = dy / dx\n    const p = a.y - m * a.x\n\n    let x\n    let y\n\n    if (m === 0) {\n        x = point.x\n        y = a.y\n    } else if (!isFinite(m)) {\n        x = a.x\n        y = point.y\n    } else {\n        x = point.x\n        y = m * point.x + p\n    }\n    return {x,y}\n}\n\nexport function closestPointToSegment(point, a, b ) {\n    console.log(point)\n}\n\nexport function project( p, a, b ) {\n    \n    var atob = { x: b.x - a.x, y: b.y - a.y };\n    var atop = { x: p.x - a.x, y: p.y - a.y };\n    var len = atob.x * atob.x + atob.y * atob.y;\n    var dot = atop.x * atob.x + atop.y * atob.y;\n    var t = Math.min( 1, Math.max( 0, dot / len ) );\n\n    dot = ( b.x - a.x ) * ( p.y - a.y ) - ( b.y - a.y ) * ( p.x - a.x );\n    \n    return {\n        point: {\n            x: a.x + atob.x * t,\n            y: a.y + atob.y * t\n        },\n        left: dot < 1,\n        dot: dot,\n        t: t\n    };\n}","import React from \"react\";\n\nexport default function Floor({ polygon }) {\n    return <polygon\n        points={polygon}\n        fill=\"#ffffaa\"\n        stroke=\"steelblue\"\n        strokeWidth={8}\n    />;\n}\n///add memo\n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points, XY } from \"../interfaces\";\nimport {  getAllPoints } from \"../utils\";\n\nfunction Point({\n    point,\n    visible,\n}: {\n    point: any;\n    visible: boolean;\n}) {\n\n    const { __rooms } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    \n    const roomIndex = rooms.findIndex(room => room.id === point.room)\n\n    if (!visible) {\n        return null;\n    }\n\n    const dragging = (e: any, dnd: DraggableData) => {\n\n        rooms[roomIndex].points[point.i].x = point.x + dnd.deltaX\n        rooms[roomIndex].points[point.i].y = point.y + dnd.deltaY\n\n        setRooms([...rooms])\n    };\n\n    const dragEnd = () => {\n\n        let allPoints = getAllPoints(rooms)\n\n        console.log(allPoints)\n\n        allPoints.map(otherPoint => {\n            console.log(otherPoint.i)\n            console.log(otherPoint.room)\n            if (otherPoint.room !== point.room || otherPoint.i !== point.i) {\n                if (Math.abs(point.absX - otherPoint.absX) < 16) {\n                    rooms[roomIndex].points[point.i].x = otherPoint.absX - point.offsetX\n                }\n                if (Math.abs(point.absY - otherPoint.absY) < 16) {\n                    rooms[roomIndex].points[point.i].y = otherPoint.absY - point.offsetY\n                }\n                \n            }\n        })\n        setRooms([...rooms])\n    };\n\n    return (\n        <DraggableCore\n            handle=\".corner\"\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <g>\n                <circle\n                    className=\"corner\"\n                    cx={point.x}\n                    cy={point.y}\n                    r={16}\n                    fill={\"white\"}\n                    stroke={\"#38a0f9\"}\n                    strokeWidth={4}\n                />\n                <text\n                    x={point.x}\n                    y={point.y}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    pointerEvents=\"none\"\n                    fill=\"grey\"\n                >\n                    {point.i}\n                </text>\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Point;\n","import React, { useState, useContext } from \"react\";\nimport { line } from \"d3-shape\";\nimport { DraggableCore } from \"react-draggable\";\nimport { Points } from './../interfaces'\nimport { RoomContext } from './../RoomContext'\nimport Point from \"./Point\";\nimport { getAllPoints } from \"../utils\";\n\nexport default function Segment({\n    pathPoints,\n    visible,\n    segmentIndex,\n}: {\n    pathPoints: any,\n    visible: boolean,\n    segmentIndex: number\n}) {\n\n    const { __quickMenuPosition, __quickMenuState, __selectedPathPoints, __rooms, __pointer, __pathNode } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n    const [pointer, setPointer] = __pointer\n    const [pathNode, setPathNode] = __pathNode\n\n    const [isDragging, setIsDragging] = useState(false)\n\n    let [a, b] = pathPoints;\n\n    const roomIndex = rooms.findIndex(room => room.id === a.room)\n\n    let data = [[a.x, a.y], [b.x, b.y]]\n\n    let path = line()\n        .x((d) => d[0])\n        .y((d) => d[1])\n\n    const dragging = (e, dnd) => {\n\n        setIsDragging(true)\n\n        a.x += dnd.deltaX\n        a.y += dnd.deltaY\n\n        b.x += dnd.deltaX\n        b.y += dnd.deltaY\n\n        rooms[roomIndex].points[a.i].x = a.x\n        rooms[roomIndex].points[a.i].y = a.y\n\n        rooms[roomIndex].points[b.i].x = b.x\n        rooms[roomIndex].points[b.i].y = b.y\n\n        setRooms([...rooms])\n    }\n\n    const dragEnd = (e, dnd) => {\n\n        if (!isDragging) {\n            segmentClicked(e)\n            return\n        }\n        setIsDragging(false)\n\n        let allPoints = getAllPoints(rooms)\n\n        pathPoints.forEach(pathPoint => {\n            allPoints.forEach(point => {\n                if (pathPoint.id !== point.id) {\n                    if (Math.abs(pathPoint.absX - point.absX) <= 16) {\n                        rooms[roomIndex].points[pathPoint.i].x = point.absX - pathPoint.offsetX\n                    }\n                    if (Math.abs(pathPoint.absY - point.absY) <= 16) {\n                        rooms[roomIndex].points[pathPoint.i].y = point.absY - pathPoint.offsetY\n                    }\n                }\n            });\n        });\n        setRooms([...rooms])\n    }\n\n    const segmentClicked = e => {\n        setPointer({x : e.clientX, y : e.clientY})\n        e.preventDefault()\n\n        let x\n        let y\n\n        if (e.type === 'mouseup') {\n            x = e.clientX\n            y = e.clientY\n        } else {\n            x = e.touches[0].pageX\n            y = e.touches[0].pageY\n        }\n\n\n        setQuickMenuPosition({ x, y })\n        setQuickMenuState(prev => !prev)\n        setSelectedPathPoints(pathPoints)\n        setPathNode(e.target)\n    }\n\n    // if (!visible) {\n    //     return null;\n    // }\n\n    return (\n        <DraggableCore\n            handle=\".segment\"\n            //onStart={() => setIsDragging(true)}\n            onDrag={dragging}\n            onStop={dragEnd}\n            cancel=\".doorCenter\"\n        >\n            <path\n                style={ visible ?  { visibility : \"visible\" } : { visibility : 'hidden'}}\n                d={path(data)}\n                id={a.room + '.' + a.i + '.' + b.i}\n                className=\"segment\"\n                strokeWidth={20}\n                stroke=\"#77cfff\"\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                opacity={0.8}\n            //onClick={e => segmentClicked(e)}\n            />\n        </DraggableCore>\n    );\n}\n","import React from \"react\";\n\nfunction Size({pathPoints, visible}) {\n    const [a, b] = pathPoints;\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n\n    var c = Math.round(Math.floor(Math.sqrt(dx * dx + dy * dy)/5)*5)\n    //console.log(c)\n\n    if (!visible) {\n        return null;\n    }\n\n    return ( // need to \n        <text style={{pointerEvents:'none', fill:'#404040'}}>\n            <textPath startOffset=\"45%\" xlinkHref={\"#\" + a.room + '.' + a.i + '.' + b.i}>\n                {c}\n            </textPath>\n        </text>\n    );\n}\n\nexport default Size;\n","import React, { useContext } from 'react'\nimport { getY, project } from '../utils'\nimport { RoomContext } from \"../RoomContext\"\nimport { DraggableCore } from \"react-draggable\"\n\nexport default function Door({ door, i }) {\n\n    const { __rooms } = useContext(RoomContext)\n    \n    const [rooms, setRooms] = __rooms\n    \n    const { pointsIds, doorCenter } = door\n    \n    const room = rooms.find(({id}) => id === pointsIds.a.split('.')[0])\n       \n    const a = room.getPoints().find(({id}) => id === pointsIds.a)\n    const b = room.getPoints().find(({id}) => id === pointsIds.b)\n\n    const coords = project(doorCenter, a, b).point\n\n    const dragging = (e, dnd) => {\n\n        const newDoorCenter = { ...doorCenter }\n        newDoorCenter.x += dnd.deltaX\n        newDoorCenter.y += dnd.deltaY\n\n        const newPoint = project(newDoorCenter, a, b)\n\n        room.doors[i].doorCenter.x = newPoint.point.x\n        room.doors[i].doorCenter.y = newPoint.point.y\n        setRooms([...rooms])\n    }\n\n    return (\n\n        <DraggableCore\n            handle=\".doorCenter\"\n            onDrag={dragging}\n        >\n            <circle\n                className='doorCenter'\n                cx={coords.x}\n                cy={coords.y}\n                r={10}\n                fill='#ffffaa'\n                stroke=\"steelblue\"\n                strokeWidth={4}\n            />\n        </DraggableCore>\n    )\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { getPath, getPolygon, getAllPoints } from \"./../utils\";\nimport Floor from \"./Floor\";\nimport Point from \"./Point\";\nimport Segment from \"./Segment\";\nimport Size from \"./Size\";\nimport Door from './Door'\n\nfunction Room({\n    isSelected,\n    room,\n    i\n}: {\n    isSelected: boolean;\n    room: any;\n    i: number\n}) {\n\n    const { __rooms, __selectedRoom } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n\n    const deleteRoom = (e: any) => {\n        if (isSelected) {\n            if (e.keyCode === 8) {\n                setRooms((rooms: any) => rooms.filter((el: any) => el.id !== room.id));\n            }\n        }\n    };\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        e.preventDefault()\n\n        const newRooms = [...rooms]\n        newRooms[i].x += dnd.deltaX\n        newRooms[i].y += dnd.deltaY\n\n        setRooms(newRooms)\n    };\n\n    const dragEnded = (e, dnd) => {\n\n        const allPoints = getAllPoints(rooms)\n\n        room.getPoints().forEach(point => {\n            allPoints.forEach(otherPoint => {\n\n                let dx = Math.abs(point.absX - otherPoint.absX)\n                let dy = Math.abs(point.absY - otherPoint.absY)\n\n                if (point.room !== otherPoint.room) {\n                    if (dx <= 16) {\n                        rooms[i].points[point.i].x = otherPoint.absX - point.offsetX\n                    }\n                    if (dy <= 16) {\n                        rooms[i].points[point.i].y = otherPoint.absY - point.offsetY\n                    }\n                }\n            })\n        })\n        setRooms([...rooms])\n    }\n\n    return (\n        <DraggableCore\n            handle=\".room\"\n            cancel=\".corner, .segment, .doorCenter\"\n            disabled={!isSelected}\n            onStop={dragEnded}\n            onDrag={dragging}\n        >\n            <g\n                className={\"room\"}\n                id={room.id}\n                transform={`translate(${room.x} ${room.y})`}\n                onClick={() => {\n                    setSelectedRoom(room.id);\n                }}\n                onKeyDown={deleteRoom}\n                tabIndex={-1}\n                style={{ outline: 0 }}\n            >\n                <Floor\n                    polygon={getPolygon(room.getPoints())}\n                />\n\n                {getPath(room.getPoints()).map((pathPoints, index) => (\n                    <Segment\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                        segmentIndex={index}\n                    />\n                ))}\n\n                {room.getPoints().map((point, index) => (\n                    <Point\n                        key={index}\n                        point={point}\n                        visible={isSelected}\n                    />\n                ))}\n                {getPath(room.getPoints()).map((pathPoints, index) => (\n                    <Size\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                    />\n                ))}\n                {room.doors.map((door, i) => (\n                    <Door\n                        key={i}\n                        door={door}\n                        i={i}\n                    />\n                ))}\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Room;\n\n","import React, { useState, useContext } from \"react\";\nimport Background from \"./Background\";\nimport Room from \"./Room\";\nimport Door from './Door'\nimport { RoomContext } from \"../RoomContext\";\n\nexport default function Plan() {\n\n    const { __rooms, __selectedRoom, __doors } = useContext(RoomContext)\n\n    const [rooms] = __rooms;\n    const [selectedRoom] = __selectedRoom;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const [doors] = __doors;\n\n    return (\n        <svg\n            id='plan'\n            width={width}\n            height={height}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        >\n\n            <Background\n                width={width}\n                height={height}\n            />\n\n            {\n                rooms\n                    .sort((a, b) => {\n                        const c = (a.id === selectedRoom)\n                        const d = (b.id === selectedRoom)\n                        return (c === d) ? 0 : c ? 1 : - 1\n                    })\n                    .map((room, i) => {\n                        return (\n                            <Room\n                                key={room.id}\n                                isSelected={selectedRoom === room.id ? true : false}\n                                room={room}\n                                i={i}\n                            />\n                        );\n                    })\n            }\n            {/* {rooms.reduce((acc, curr, i) => {\n                acc.push(...curr.doors)\n                return acc\n            }, []).map((door, i) => (\n                    <Door\n                        key={i}\n                        door={door}\n                        i={i}\n                    />\n                ))} */}\n\n\n\n\n        </svg>\n    );\n}\n","import React, { useContext } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nimport { getPointCoords, getPath, getAllPoints } from './../../utils'\nimport { RoomContext } from './../../RoomContext'\n\nconst QuickMenu = () => {\n\n    const {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedPathPoints,\n        __rooms,\n        __selectedRoom,\n        __pointer,\n        __doors,\n        __pathNode\n    } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n    const [pointer] = __pointer\n    const [doors, setDoors] = __doors\n    const [pathNode] = __pathNode\n\n    //console.log(pointer)\n\n    const handleClose = (e) => {\n        setQuickMenuState(false)\n        setQuickMenuPosition(null)\n    }\n\n    const addCorner = e => {\n        e.persist()\n        console.log(e)\n\n\n        const [a, b] = selectedPathPoints\n        const roomIndex = rooms.findIndex(room => room.id === a.room)\n\n        const x = pointer.x - rooms[roomIndex].x\n        const y = pointer.y - rooms[roomIndex].y\n\n        const newPoint = getPointCoords([x, y], selectedPathPoints)\n\n        console.log(newPoint)\n\n        getAllPoints(rooms).forEach(point => {\n            console.log(newPoint)\n            if (Math.abs(point.absX - (newPoint.x + rooms[roomIndex].x)) < 16) {\n                newPoint.x = point.absX - rooms[roomIndex].x\n            }\n            if (Math.abs(point.absY - (newPoint.y + rooms[roomIndex].y)) < 16) {\n                newPoint.y = point.absY - rooms[roomIndex].y\n            }\n        })\n\n        const point1 = { ...newPoint }\n        const point2 = { ...newPoint }\n\n        rooms[roomIndex].points.splice(a.i + 1, 0, point1, point2)\n        setRooms([...rooms])\n\n        handleClose(e)\n    }\n\n    const addDoor = e => {\n\n        const [a, b] = selectedPathPoints\n        console.log(a,b)\n\n        const roomIndex = rooms.findIndex(room => room.id === a.room)\n\n        // const x = Math.abs(pointer.x - a.absX)\n        // const y = Math.abs(pointer.y - b.absY)\n        //const doorCenter = { x, y }\n\n        const x = pointer.x - rooms[roomIndex].x\n        const y = pointer.y - rooms[roomIndex].y\n        const doorCenter = getPointCoords([x, y], selectedPathPoints)\n        console.log(doorCenter)\n\n        const pointsIds = { a: a.id, b: b.id }\n\n        const door = { pointsIds, doorCenter }\n\n        rooms[roomIndex].doors.push(door)\n\n        setRooms([...rooms])\n\n        handleClose(e)\n\n    }\n\n\n    return (\n        <Menu\n            id=\"quickMenu\"\n            transitionDuration={{ enter: 0, exit: 0 }}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                quickMenuPosition !== null\n                    ? { top: quickMenuPosition.y, left: quickMenuPosition.x }\n                    : undefined\n            }\n            open={quickMenuState}\n            onClose={handleClose}\n        >\n            <MenuItem\n                onClick={addCorner}>\n                new corner\n            </MenuItem>\n\n            <MenuItem onClick={addDoor}>new door</MenuItem>\n        </Menu>\n    )\n}\n\nexport default QuickMenu\n","import React, { useState } from \"react\";\nimport Plan from \"./components/Plan\";\nimport \"./App.css\";\nimport QuickMenu from './components/UI/QuickMenu'\nimport { RoomContext } from './RoomContext'\n\nfunction App() {\n\n    const __quickMenuPosition = useState(null)\n    const __quickMenuState = useState(false)\n    const __rooms = useState([])\n    const __selectedRoom = useState(null)\n    const __selectedPathPoints = useState(null)\n    const __pointer = useState(null)\n    const __doors = useState([])\n    const __pathNode = useState(null)\n\n    const CTX = {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedRoom,\n        __rooms,\n        __selectedPathPoints,\n        __pointer,\n        __doors,\n        __pathNode\n    }\n    \n\n    return (\n        <div\n            className=\"App\"\n            style={{ overscrollBehavior: \"none\" }}\n            onContextMenu={e => e.preventDefault()}\n        >\n            <RoomContext.Provider value={CTX}>\n                <Plan/>\n                <QuickMenu/>\n            </RoomContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}