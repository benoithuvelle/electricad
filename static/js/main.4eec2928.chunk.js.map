{"version":3,"sources":["components/Point.js","components/Floor.js","components/Segment.js","components/Size.js","components/Room.js","actions.js","components/Background.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Point","props","point","electricad","setRoom","handle","onStart","e","dnd","onDrag","room","find","id","split","thisPoint","points","x","deltaX","y","deltaY","onStop","reduce","acc","curr","i","map","dx","dy","push","filter","Math","abs","className","cx","cy","r","fill","stroke","strokeWidth","Floor","d","join","Segment","path","setElectricad","pointA","index","pointB","segment","line","opacity","Size","a","b","c","floor","sqrt","startOffset","xlinkHref","Room","setSelectedRoom","isSelected","useState","useEffect","console","log","position","cancel","disabled","allOtherPoints","el","preventDefault","transform","onClick","onKeyDown","keyCode","tabIndex","style","outline","key","this","polygon","color","random","toString","current","length","Background","width","height","onDoubleClick","clientX","clientY","Canvas","selectedRoom","window","innerWidth","innerHeight","App","overscrollBehavior","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4eec2928.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DraggableCore } from 'react-draggable'\n\n\nfunction Point(props) {\n\n    let { point, electricad, setRoom } = props\n        \n    const dragStarted = (e, dnd) => {\n        ////console.log(e, dnd)\n    }\n    const dragging = (e, dnd) => {\n\n        let room = electricad.find(room => room.id === point.id.split('.')[0])\n        let thisPoint = room.points.find(e => e.id === point.id)\n\n        thisPoint.x = point.x + dnd.deltaX\n        thisPoint.y = point.y + dnd.deltaY\n\n        setRoom({...room})\n    }\n    const dragEnd = (e, dnd) => {\n\n        let room = electricad.find(room => room.id === point.id.split('.')[0])\n\n        let thisPoint = room.points.find(e => e.id === point.id)\n\n\n        let allPoints = electricad.reduce((acc, curr, i) => {\n            curr.points.map(point => {\n                point.dx = curr.x\n                point.dy = curr.y\n                acc.push(point)\n            })\n            return acc\n        }, [])\n\n\n\n        allPoints\n            .filter(e => e.id !== point.id)\n            .map(point => {\n\n                if (Math.abs((point.x + point.dx) - (thisPoint.x + thisPoint.dx)) <= 16) {\n                    thisPoint.x = point.dx + point.x - thisPoint.dx\n                }\n                if (Math.abs((point.y + point.dy) - (thisPoint.y + thisPoint.dy)) <= 16) {\n                    thisPoint.y = point.dy + point.y - thisPoint.dy\n                }\n\n                setRoom({...room})\n\n            })\n\n    }\n\n    return (\n        <DraggableCore\n            handle='.corner'\n            onStart={dragStarted}\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <circle\n                className='corner'\n                id={point.id}\n                cx={point.x}\n                cy={point.y}\n                r={16}\n                fill={\"white\"}\n                stroke={\"#38a0f9\"}\n                strokeWidth={4}\n                //opacity={0.6}\n            />\n        </DraggableCore >\n    )\n}\n\nexport default Point","import React from 'react'\n\nexport default function Floor(props) {\n\n    //console.log('floor rendering')\n\n    let { points } = props\n\n    let d = points.map(point => [point.x, point.y].join(' '))\n\n    return (\n        <polygon\n            points={d}\n            fill='#ffffaa'\n            stroke='steelblue'\n        />\n\n\n    )\n}\n///add memo","import React from 'react'\nimport { line } from 'd3-shape'\nimport { DraggableCore } from 'react-draggable'\n\n\n\nexport default function Segment(props) {\n    let { room, path, setElectricad, electricad, index } = props\n\n    let pointA = room.points.find(e => e.id === path[0].id)\n    let pointB = room.points.find(e => e.id === path[1].id)\n\n    //console.log(path.length)\n\n    let segment = line()\n        .x(d => d.x)\n        .y(d => d.y)\n\n    const dragging = (e, dnd) => {\n        pointA.x = pointA.x + dnd.deltaX\n        pointB.x = pointB.x + dnd.deltaX\n        pointA.y = pointA.y + dnd.deltaY\n        pointB.y = pointB.y + dnd.deltaY\n        setElectricad([...electricad])\n    }\n\n    const dragEnd = (e, dnd) => {\n\n        let allPoints = electricad.reduce((acc, curr, i) => {\n            curr.points.map(point => {\n                point.dx = curr.x\n                point.dy = curr.y\n                acc.push(point)\n            })\n            return acc\n        }, [])\n\n        let allOtherPoints = allPoints.filter(point => point.id !== pointA.id && point.id !== pointB.id)\n\n        allOtherPoints.map(point => {\n\n            if (Math.abs((point.x + point.dx) - (pointA.x + pointA.dx)) <= 16) {\n                pointA.x = point.dx + point.x - pointA.dx\n            }\n            if (Math.abs((point.y + point.dy) - (pointA.y + pointA.dy)) <= 16) {\n                pointA.y = point.dy + point.y - pointA.dy\n            }\n            if (Math.abs((point.x + point.dx) - (pointB.x + pointB.dx)) <= 16) {\n                pointB.x = point.dx + point.x - pointB.dx\n            }\n            if (Math.abs((point.y + point.dy) - (pointB.y + pointB.dy)) <= 16) {\n                pointB.y = point.dy + point.y - pointB.dy\n            }\n\n            setElectricad([...electricad])\n\n        })\n    }\n\n    return (\n        <DraggableCore\n            handle='.segment'\n            // onStart={dragStarted}\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <path\n                d={segment(path)}\n                id={path.id}\n                className='segment'\n                strokeWidth={20}\n                stroke='#77cfff'\n                opacity={.8}\n\n            />\n\n        </DraggableCore>\n    )\n}\n","import React from 'react'\n\nfunction Size(props) {\n\n    const { path } = props\n\n    let a = path[0]\n    let b = path[1]\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n\n    var c = Math.floor(Math.sqrt(dx * dx + dy * dy));\n\n    return (\n\n        <text >\n            <textPath startOffset=\"45%\" xlinkHref={\"#\" + path.id}>\n                {c}\n            </textPath>\n        </text>\n    )\n}\n\nexport default Size\n","import React, { useState, useEffect } from 'react'\nimport Point from './Point'\nimport Floor from './Floor'\nimport Segment from './Segment'\nimport Size from './Size'\nimport Draggable from 'react-draggable'\n\nfunction Room(props) {\n\n    ///////////////////////////////////////////\n    /////////// props and states //////////////\n    ///////////////////////////////////////////\n\n    let { electricad, setElectricad, setSelectedRoom, isSelected, index } = props\n\n    let [room, setRoom] = useState(props.room)\n    useEffect(() => {\n        console.log('room changed')\n        electricad[index] = room\n        setElectricad([...electricad])\n    }, [room])\n\n    ///////////////////////////////////////////\n    /////////// //console.log  //////////////////\n    ///////////////////////////////////////////\n\n    console.log('rendering room : ' + room.id)\n    //console.log(room.path())\n\n    ///////////////////////////////////////////\n    /////////////// functions /////////////////\n    ///////////////////////////////////////////\n\n    const deleteRoom = e => {\n        if (isSelected) {\n            if (e.keyCode === 8) {\n                //console.log('you want to delete this ?')\n                setElectricad(electricad.filter(el => el.id !== room.id))\n            }\n        }\n    }\n\n    const dragging = (e, dnd) => {\n        e.preventDefault()\n    }\n\n    const dragEnded = (e, dnd) => {\n        room.x = dnd.x\n        room.y = dnd.y\n\n        let allOtherPoints = electricad\n            .filter(el => el.id !== room.id)\n            .reduce((acc, curr, i) => {\n                curr.points.map(point => {\n                    point.dx = curr.x\n                    point.dy = curr.y\n                    acc.push(point)\n                })\n                return acc\n            }, [])\n\n        let newPoints = room.points.map(pointA => {\n            allOtherPoints.map(pointB => {\n                let a = pointA.x + room.x\n                let b = pointB.x + pointB.dx\n                let dx = Math.abs(a - b)\n                ////console.log(dx)\n                if (dx <= 30) {\n                    ////console.log('x match')\n                    pointA.x = b - room.x\n                }\n            })\n            allOtherPoints.map(pointB => {\n                let a = pointA.y + room.y\n                let b = pointB.y + pointB.dy\n                let dy = Math.abs(a - b)\n                ////console.log(dx)\n                if (dy <= 30) {\n                    ////console.log('x match')\n                    pointA.y = b - room.y\n                }\n            })\n        })\n        //console.log(room.points)\n        setRoom({ ...room })\n    }\n\n    ///////////////////////////////////////////\n    //////////////// return ///////////////////\n    ///////////////////////////////////////////\n\n    return (\n        <Draggable\n            handle='.room'\n            position={{ x: room.x, y: room.y }}\n            cancel={['.corner', '.segment']}\n            disabled={!isSelected}\n            onStop={dragEnded}\n            onDrag={dragging}\n        >\n            <g\n                className={'room'}\n                id={room.id}\n                transform={`translate(${room.x} ${room.y})`}\n                onClick={() => {\n\n                    setSelectedRoom(room.id)\n                }}\n                onKeyDown={deleteRoom}\n                tabIndex={-1}\n                style={{ outline: 0 }}\n            >\n                <Floor\n                    //room={room}\n                    points={room.points}\n                />\n                {\n                    isSelected ?\n                        room.path().map(path =>\n                            <Segment\n                                index={index}\n                                electricad={electricad}\n                                setElectricad={setElectricad}\n                                key={path.id}\n                                path={path}\n                                electricad={electricad}\n                                setRoom={setRoom}\n                                room={room}\n                            />)\n                        :\n                        null\n                }\n\n\n                {\n                    isSelected ?\n                        room.points.map(point =>\n                            <Point\n                                key={point.id}\n                                point={point}\n                                electricad={electricad}\n                                setRoom={setRoom}\n                                room={room}\n                            />)\n                        :\n                        null\n                }\n                {\n                    room.path().map(path => <Size\n                        key={path.id}\n                        path={path}\n                    />)\n                }\n\n\n\n            </g>\n        </Draggable>\n    )\n}\n\n\nexport default Room\n// export default React.memo(Room,\n//     (prevProps, nextProps) => {\n//         if (prevProps.room === nextProps.room && prevProps.isSelected === nextProps.isSelected) {\n//             return true;\n//         }\n//         return false;\n//     })\n\n","export function Room(id, x, y) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.points = [\n        { x: 0, y: 0, id: id +'.corner.' + 0 },\n        { x: 100, y: 0, id: id +'.corner.' + 1 },\n        { x: 100, y: 100, id: id +'.corner.' + 2 },\n        { x: 0, y: 100, id: id +'.corner.' + 3 },\n    ];\n    this.polygon = function () { return this.points.map(point => [point.x, point.y].join(' ')) };\n    this.color = '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n    this.path = function () {\n        return this.points.reduce((acc, current, i) => {\n            acc[i] = [current]\n            acc[i].room = this.id ////\n            acc[i].id = this.id + '.path' + i\n            if (i > 0) acc[i-1].push(current)\n            if (i === this.points.length -1) acc[i].push(acc[0][0])\n            return acc\n        }, [])\n    }\n\n}\n\n","import React from 'react'\nimport { createRoom } from './../actions'\nimport { Room } from './../actions'\n\nexport default function Background(props) {\n\n    let { setElectricad, electricad, setSelectedRoom } = props\n\n    return (\n        <rect\n            id='background'\n            width={props.width}\n            height={props.height}\n            fill='#38a0f9'\n            //fill='pink'\n            onDoubleClick={\n                (e) => {\n                    let room = new Room('cuisine' + Math.floor(Math.random()*100), e.clientX-50, e.clientY-50)\n                    setElectricad([...electricad, room])\n                    setSelectedRoom(room.id)\n                }\n            }\n            onClick={\n                () => setSelectedRoom(null)\n            }\n        />\n    )\n}\n","import React, { useState } from 'react'\nimport Room from './../components/Room'\nimport Background from './../components/Background'\nimport Size from './../components/Size'\n\nexport default function Canvas() {\n\n    //console.log('canvas rendering')\n\n    const [electricad, setElectricad] = useState([])\n    const [selectedRoom, setSelectedRoom] = useState(null)\n\n    let width = window.innerWidth\n    let height = window.innerHeight\n\n    ////console.log('selectedRoom : ' + selectedRoom)\n\n\n    return (\n        <svg\n            width={width}\n            height={height}\n        >\n            <Background\n                width={width}\n                height={height}\n                setElectricad={setElectricad}\n                electricad={electricad}\n                setSelectedRoom={setSelectedRoom}\n            />\n\n            {electricad.map((room, i) => {\n                //////console.log(room)\n                return (\n                    \n                    <Room\n                        key={room.id}\n                        room={room}\n                        electricad={electricad}\n                        isSelected={selectedRoom === room.id ? true : false}\n                        setSelectedRoom={setSelectedRoom}\n                        setElectricad={setElectricad}\n                        index={i}\n\n                    />\n                )\n            }\n            )}\n\n        </svg>\n    )\n}\n","import React, { useState } from 'react';\nimport Canvas from './components/Canvas'\nimport './App.css'\n\n\nfunction App() {\n\n  console.log('app rendering')\n  \n  return (\n    <div className=\"App\" style={{overscrollBehavior : 'none'}}>\n      <Canvas\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}