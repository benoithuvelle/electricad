{"version":3,"sources":["RoomContext.tsx","components/Background.tsx","utils.ts","components/Floor.tsx","components/Point.tsx","components/Segment.tsx","components/Size.tsx","components/Room.tsx","components/Plan.tsx","components/UI/QuickMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoomContext","createContext","Background","width","height","useContext","__selectedRoom","__rooms","rooms","setRooms","setSelectedRoom","id","fill","onDoubleClick","e","window","prompt","find","room","alert","coords","clientX","clientY","points","getPoints","this","reduce","acc","curr","i","x","y","absX","absY","offsetX","offsetY","onClick","getPolygon","map","point","join","getPath","current","XY","push","length","getAllPointsButThisRoom","roomIndex","filter","_","dx","dy","getPointsAbsolutePosition","getAllPointsAbsolutePosition","roomPoints","compareRoomPoints","forEach","allPoints","path","console","log","a","b","equation","ax","ay","bx","by","m","offset","isPointInPath","Floor","polygon","stroke","Point","pointIndex","setPoints","visible","handle","onDrag","dnd","newPoints","deltaX","deltaY","onStop","otherPoint","Math","abs","className","cx","cy","r","strokeWidth","textAnchor","alignmentBaseline","pointerEvents","Segment","pathPoints","segmentIndex","__quickMenuPosition","__quickMenuState","__selectedPathPoints","setQuickMenuPosition","setQuickMenuState","setSelectedPathPoints","useState","setIsDragging","data","line","d","segmentClicked","type","preventDefault","touches","pageX","pageY","prev","newPathPoints","el","opacity","Size","c","round","floor","sqrt","style","startOffset","xlinkHref","Room","isSelected","defaultPoints","useEffect","updateRoom","index","slice","cancel","disabled","allOtherPoints","pointA","pointB","roomUpdate","transform","onKeyDown","keyCode","tabIndex","outline","key","Plan","selectedRoom","innerWidth","innerHeight","sort","QuickMenu","quickMenuPosition","quickMenuState","selectedPathPoints","handleClose","Menu","transitionDuration","enter","exit","anchorReference","anchorPosition","top","left","undefined","open","onClose","MenuItem","persist","box","target","getBoundingClientRect","pointer","newPoint","p","Infinity","addCorner","index1","newRooms","findIndex","splice","App","CTX","overscrollBehavior","onContextMenu","Provider","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f390e87.chunk.js","sourcesContent":["import { createContext, useState } from 'react'\n\nexport const RoomContext = createContext(null) \n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\n\nexport default function Background({\n    //setSelectedRoom,\n    //setRooms,\n    //rooms,\n    width,\n    height,\n}: {\n    //setSelectedRoom: any;\n    //setRooms: any;\n    //rooms: any;\n    width: number;\n    height: number;\n}) {\n\n    const { __selectedRoom, __rooms } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    const [_, setSelectedRoom] = __selectedRoom\n\n    const addRoom = (e: any) => {\n        const id = window.prompt(\"Dénomination de la pièce\");\n\n        if (id === '' || id === null) return\n\n        if (rooms.find((room) => room.id === id)) {\n            alert(`Une pièce nommée ${id} existe déjà. Création annulée !!!`);\n            return;\n        }\n\n        const room = {\n            id: id,\n            coords: [e.clientX - 75, e.clientY - 75],\n            points: [[0, 0], [0, 150], [150, 150], [150, 0]],\n            getPoints() {\n                return this.points.reduce((acc, curr, i) => {\n                    acc[i] = {\n                        x : curr[0],\n                        y : curr[1],\n                        absX : curr[0] + this.coords[0],\n                        absY : curr[1] + this.coords[1],\n                        offsetX : this.coords[0],\n                        offsetY : this.coords[1],\n                        i\n                    }\n                    return acc\n                }, [])\n            }\n        };\n\n        setRooms([...rooms, room]);\n        setSelectedRoom(room.id);\n    };\n\n    return (\n        <rect\n            id=\"background\"\n            width={width}\n            height={height}\n            fill=\"#38a0f9\"\n            onDoubleClick={addRoom}\n            onClick={() => setSelectedRoom(null)}\n        />\n    );\n}\n","import { Path, Points } from \"./interfaces\";\nimport { Room } from './interfaces'\nimport Point from \"./components/Point\";\n\nexport function getPolygon(points: Points) {\n    return points.map((point) => [point[0], point[1]].join(\" \"));\n}\n\nexport function getPath(points: Points) {\n    return points.reduce((acc, current, i) => {\n        acc[i] = [{ XY: current, i: i }];\n        if (i > 0) {\n\n            acc[i - 1].push({ XY: current, i: i })\n        }\n        if (i === points.length - 1) acc[i].push(acc[0][0]);\n        return acc;\n    }, []);\n}\n\n\nexport function getAllPointsButThisRoom(rooms, roomIndex) {\n    let array = rooms\n        .filter((_, i) => i !== roomIndex)\n        .reduce((acc, curr, i) => {\n            curr.points.map(point => {\n                point.dx = curr.coords[0]\n                point.dy = curr.coords[1]\n                acc.push(point)\n            })\n            return acc\n        }, [])\n    return array\n}\n\nexport function getPointsAbsolutePosition(room) {\n    let array = room.points\n        .map(point => {\n            //console.log(point)\n            point.dx = room.coords[0]\n            point.dy = room.coords[1]\n            return point\n        })\n    return array\n}\n\nexport function getAllPointsAbsolutePosition(rooms) {\n    let array = rooms.reduce((acc, curr, i) => {\n        const roomPoints = getPointsAbsolutePosition(curr)\n        acc.push(...roomPoints)\n        return acc\n    }, [])\n    return array\n}\n\nexport function getThisRoomPoints(room : Room): Points {\n    let array = room.points.reduce((acc, curr, i) => {\n        acc[i] = {\n            x : curr[0],\n            y : curr[1],\n            dx : curr[0] + room.coords[0],\n            dy : curr[1] + room.coords[1],\n            i : i\n        }\n    }, [])\n    return array\n}\n\nexport function compareRoomPoints(rooms) {\n    rooms.forEach((room, i) => {\n        const allPoints = getAllPointsButThisRoom(rooms, i)\n        let paths = getPath(room.points)\n        paths.forEach(path => {\n            allPoints.forEach(point => {\n                console.log(point)\n                isPointInPath(path, point)\n            });\n        });\n    });\n}\n\nexport function isPointInPath(path, point) {\n    const [a, b] = path\n\n    console.log(a)\n\n    const ax = a.XY[0] + a.XY.dx\n    const ay = a.XY[1] + a.XY.dy\n    const bx = b.XY[0] + b.XY.dx\n    const by = b.XY[1] + b.XY.dy\n\n    const dx = bx - ax\n    const dy = by - ay\n\n    const m = dy/dx\n\n    // ay = m * ax + offset  \n\n    const offset = ay - m * ax\n\n    let equation\n    if (dx === 0) { //verticale\n        console.log('droite verticale')\n        equation = ax - (point[0] + point.dx)\n    } else if (dy === 0) { //horizontale\n        equation = ay - (point[1] + point.dy)\n    } else {\n        equation = ay - m * ax - offset\n    }\n    console.log(equation)\n    console.log(point[1] + point.dx - m * (point[0] + point.dy) - offset)\n\n    if (point[1] + point.dx - m * (point[0] + point.dy) - offset === equation) {\n        console.log(\"coucou petite peruche\")\n    }\n\n\n    return equation\n\n}\n\n\nexport function addCorner(e, pathPoints) { //// props needed === pathPoints / \n\n    e.persist()\n    //////////////console.log(e.target.getBoundingClientRect())\n    //////////////console.log(e.clientX)\n    ////////////console.log(e.target)\n\n    let box = e.target.getBoundingClientRect()\n    ////////////console.log(box.left)\n    ////////////console.log(e.clientX)\n    let pointer = [e.clientX, e.clientY]\n\n    let newPoint = []\n\n    newPoint[0] = pathPoints[0].XY[0] < pathPoints[1].XY[0] ? pointer[0] - box.left + pathPoints[0].XY[0] : pointer[0] - box.left + pathPoints[1].XY[0]\n    // y = mx + b\n\n    let a = pathPoints[0]\n    let b = pathPoints[1]\n\n    //////////console.log(a.id.split('.')[2],b.id.split('.')[2])\n\n    let dx = a.XY[0] - b.XY[0]\n    let dy = a.XY[1] - b.XY[1]\n\n    let m = dy / dx\n    let p = a.XY[1] - m * a.XY[0]\n\n    //////////////console.log(m)\n\n    if (m === 0) {\n        //////////////console.log('ligne horizontale')\n        newPoint[1] = a.XY[1]\n    }\n\n    else if (m === Infinity || m === -Infinity) {\n        //////////////console.log('ligne verticale')\n        newPoint[0] = a.XY[0]\n        newPoint[1] = a.XY[1] < b.XY[1] ? Math.abs(pointer[1] - box.top + a.XY[1]) : Math.abs(pointer[1] - box.top + b.XY[1])\n    }\n\n    else {\n        newPoint[1] = m * newPoint[0] + p //+ (a.XY[0])\n        //point.y = m * point.x + p\n    }\n\n    //point.id = room.id + '.corner.' + room.points.length + 1\n\n    let index1 = a.i\n    let index2 = b.i\n    console.log([newPoint, newPoint])\n\n    return [newPoint, newPoint]\n\n    //points.splice(index1 + 1, 0, newPoint, newPoint)\n\n    //setPoints([...points])\n    //////console.log(points)\n}\n\n","import React from \"react\";\n\nexport default function Floor({polygon}) {\n    return <polygon points={polygon} fill=\"#ffffaa\" stroke=\"steelblue\" />;\n}\n///add memo\n","import React, { useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points, XY } from \"../interfaces\";\nimport { getPointsAbsolutePosition, getAllPointsAbsolutePosition } from \"../utils\";\n\nfunction Point({\n    coords,\n    point,\n    pointIndex,\n    points,\n    setPoints,\n    visible,\n}: {\n    coords: any;\n    point: any;\n    pointIndex: number;\n    points: any;\n    setPoints: any;\n    visible: boolean;\n}) {\n\n    const { __rooms } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n\n\n    if (!visible) {\n        return null;\n    }\n\n    const x = point[0];\n    const y = point[1];\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        const newPoints = [...points];\n        newPoints[pointIndex] = [x + dnd.deltaX, y + dnd.deltaY];\n        setPoints(newPoints);\n    };\n\n    const dragEnd = () => {\n\n        let newPoints = [...points]\n\n        let allPoints = getAllPointsAbsolutePosition(rooms)\n\n        allPoints.map(otherPoint => {\n            if (otherPoint !== point) {\n                if (Math.abs((point[0] + coords[0]) - (otherPoint[0] + otherPoint.dx)) < 10) {\n                    newPoints[pointIndex][0] = otherPoint[0] + otherPoint.dx - coords[0]\n                }\n                if (Math.abs((point[1] + coords[1]) - (otherPoint[1] + otherPoint.dy)) < 10) {\n                    console.log('match')\n                    newPoints[pointIndex][1] = otherPoint[1] + otherPoint.dy - coords[1]\n                }\n            }\n        })\n        setPoints(newPoints)\n    };\n\n    return (\n        <DraggableCore\n            handle=\".corner\"\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <g>\n                <circle\n                    className=\"corner\"\n                    cx={x}\n                    cy={y}\n                    r={16}\n                    fill={\"white\"}\n                    stroke={\"#38a0f9\"}\n                    strokeWidth={4}\n                />\n                <text\n                    x={x}\n                    y={y}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    pointerEvents=\"none\"\n                    fill=\"grey\"\n                >\n                    {2}\n                </text>\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Point;\n","import React, { useState, useContext } from \"react\";\nimport { line } from \"d3-shape\";\nimport { DraggableCore } from \"react-draggable\";\nimport { Points } from './../interfaces'\nimport { getAllPointsAbsolutePosition } from \"../utils\";\nimport { RoomContext } from './../RoomContext'\n\nexport default function Segment({\n    pathPoints,\n    visible,\n    segmentIndex,\n    setPoints,\n    points,\n}: {\n    pathPoints: any,\n    visible: boolean,\n    segmentIndex: number\n    setPoints: any,\n    points: any,\n}) {\n\n    const { __quickMenuPosition, __quickMenuState, __selectedPathPoints, __rooms } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n\n    const [isDragging, setIsDragging] = useState(false)\n\n    ////////console.log(pathPoints)\n    let [a, b] = pathPoints;\n\n    let data = [a.XY, b.XY]\n\n    ////////console.log(a)\n\n    let [ax, ay] = a.XY;\n    let [bx, by] = b.XY;\n\n    //////////console.log(ax)\n\n    let path = line()\n        .x((d) => d[0])\n        .y((d) => d[1])\n\n    const dragging = (e, dnd) => {\n\n        setIsDragging(true)\n\n        const newPathPoints = [...pathPoints]\n        newPathPoints[0] = [ax + dnd.deltaX, ay + dnd.deltaY]\n        newPathPoints[1] = [bx + dnd.deltaX, by + dnd.deltaY]\n\n        const newPoints = [...points]\n\n        newPoints[a.i] = newPathPoints[0]\n        newPoints[b.i] = newPathPoints[1]\n\n        setPoints([...newPoints])\n    }\n\n    const dragEnd = (e, dnd) => {\n\n        //if (!isDragging) {\n            segmentClicked(e)\n          //  return\n       // }\n        setIsDragging(false)\n\n        let allPoints = getAllPointsAbsolutePosition(rooms)\n\n        let newPoints = [...points]\n        //////console.log(newPoints)\n\n        allPoints.map(el => {\n\n            if (Math.abs((el[0] + el.dx) - (ax + a.XY.dx)) <= 16) {\n                newPoints[a.i][0] = el.dx + el[0] - a.XY.dx\n                //////console.log('match')\n            }\n            if (Math.abs((el[1] + el.dy) - (ay + a.XY.dy)) <= 16) {\n                newPoints[a.i][1] = el.dy + el[1] - a.XY.dy\n                //////console.log('match')\n\n            }\n            if (Math.abs((el[0] + el.dx) - (bx + b.XY.dx)) <= 16) {\n                newPoints[b.i][0] = el.dx + el[0] - b.XY.dx\n                //////console.log('match')\n\n            }\n            if (Math.abs((el[1] + el.dy) - (by + b.XY.dy)) <= 16) {\n                newPoints[b.i][1] = el.dy + el[1] - b.XY.dy\n                //////console.log('match')\n\n            }\n            setPoints([...newPoints])\n        })\n    }\n\n    const segmentClicked = e => {\n        console.log(e.type)\n        e.preventDefault()\n\n        let x\n        let y\n\n        if (e.type === 'mouseup') {\n            x = e.clientX\n            y = e.clientY\n        } else {\n            x = e.touches[0].pageX\n            y = e.touches[0].pageY\n        }\n\n\n        setQuickMenuPosition({ x: e.clientX, y: e.clientY })\n        setQuickMenuState(prev => !prev)\n        setSelectedPathPoints(pathPoints)\n    }\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <DraggableCore\n            handle=\".segment\"\n            //onStart={() => setIsDragging(true)}\n            onDrag={dragging}\n            onStop={dragEnd}\n        >\n            <path\n                d={path(data)}\n                id={a.i + '.' + b.i}\n                className=\"segment\"\n                strokeWidth={20}\n                stroke=\"#77cfff\"\n                opacity={0.8}\n                //onClick={e => segmentClicked(e)}\n            />\n        </DraggableCore>\n    );\n}\n","import React from \"react\";\n\nfunction Size({pathPoints, visible}) {\n    const [a, b] = pathPoints;\n    const [ax, ay] = a.XY;\n    const [bx, by] = b.XY;\n\n    var dx = ax - bx;\n    var dy = ay - by;\n\n    var c = Math.round(Math.floor(Math.sqrt(dx * dx + dy * dy)/5)*5)\n\n    if (!visible) {\n        return null;\n    }\n\n    return (\n        <text style={{pointerEvents:'none', fill:'#404040'}}>\n            <textPath startOffset=\"45%\" xlinkHref={\"#\" + a.i + '.' + b.i}>\n                {c}\n            </textPath>\n        </text>\n    );\n}\n\nexport default Size;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RoomContext } from './../RoomContext'\nimport { DraggableCore, DraggableData } from \"react-draggable\";\nimport { Points } from \"../interfaces\";\nimport { getPath, getPolygon, getAllPointsButThisRoom, getPointsAbsolutePosition, compareRoomPoints } from \"./../utils\";\nimport Floor from \"./Floor\";\nimport Point from \"./Point\";\nimport Segment from \"./Segment\";\nimport Size from \"./Size\";\n\nfunction Room({\n    isSelected,\n    roomIndex,\n    id,\n    coords,\n    room,\n    points: defaultPoints,\n}: {\n    isSelected: boolean;\n    roomIndex: number;\n    id: string;\n    coords: any;\n    room: any;\n    points: Points;\n}) {\n\n    const { __rooms, __selectedRoom } = useContext(RoomContext)\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n\n    const [points, setPoints] = useState<Points>(defaultPoints);\n\n    useEffect(() => {\n        updateRoom(room, roomIndex)\n    }, [points])\n\n    const deleteRoom = (e: any) => {\n        if (isSelected) {\n            if (e.keyCode === 8) {\n                setRooms((rooms: any) => rooms.filter((el: any) => el.id !== id));\n            }\n        }\n    };\n\n    const updateRoom = (room: any, index: number) => {\n        setRooms((rooms: any) => [\n            ...rooms.slice(0, index),\n            { ...room, points: points },\n            ...rooms.slice(index + 1),\n        ]);\n    };\n\n    const dragging = (e: any, dnd: DraggableData) => {\n        e.preventDefault()\n\n        coords[0] += dnd.deltaX\n        coords[1] += dnd.deltaY\n\n        updateRoom(room, roomIndex)\n    };\n\n    const dragEnded = (e, dnd) => {\n\n        const roomPoints = getPointsAbsolutePosition(room)\n\n        const allOtherPoints = getAllPointsButThisRoom(rooms, roomIndex)\n        let newPoints = roomPoints.map(pointA => {\n            allOtherPoints.map(pointB => {\n\n                let a = pointA[0] + pointA.dx\n                let b = pointB[0] + pointB.dx\n                let dx = Math.abs(a - b)\n                if (dx <= 10) {\n                    pointA[0] = b - pointA.dx\n                }\n            })\n            allOtherPoints.map(pointB => {\n                let a = pointA[1] + pointA.dy\n                let b = pointB[1] + pointB.dy\n                let dy = Math.abs(a - b)\n                if (dy <= 10) {\n                    pointA[1] = b - pointA.dy\n                }\n            })\n            return pointA\n        })\n\n        const roomUpdate = { ...room, points: newPoints }\n        updateRoom(roomUpdate, roomIndex)\n\n        compareRoomPoints(rooms)\n    }\n\n    return (\n        <DraggableCore\n            handle=\".room\"\n            cancel=\".corner, .segment\"\n            disabled={!isSelected}\n            onStop={dragEnded}\n            onDrag={dragging}\n        >\n            <g\n                className={\"room\"}\n                id={id}\n                transform={`translate(${coords[0]} ${coords[1]})`}\n                onClick={() => {\n                    setSelectedRoom(id);\n                }}\n                onKeyDown={deleteRoom}\n                tabIndex={-1}\n                style={{ outline: 0 }}\n            >\n                <Floor\n                    polygon={getPolygon(points)}\n                />\n\n                {getPath(points).map((pathPoints, index) => (\n                    <Segment\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                        segmentIndex={index}\n                        setPoints={setPoints}\n                        points={points}\n                    />\n                ))}\n\n                {points.map((point, index) => (\n                    <Point\n                        coords={coords}//remove\n                        key={index}\n                        point={point}\n                        pointIndex={index}//remove\n                        points={points}//remove\n                        setPoints={setPoints}\n                        visible={isSelected}\n                    />\n                ))}\n                {getPath(points).map((pathPoints, index) => (\n                    <Size\n                        key={index}\n                        pathPoints={pathPoints}\n                        visible={isSelected}\n                    />\n                ))}\n            </g>\n        </DraggableCore>\n    );\n}\n\nexport default Room;\n\n","import React, { useState, useContext } from \"react\";\nimport Background from \"./Background\";\nimport Room from \"./Room\";\nimport { RoomContext } from \"../RoomContext\";\n\nexport default function Plan() {\n\n    const { __rooms, __selectedRoom, __selectedPathPoints } = useContext(RoomContext)\n\n    const [rooms, setRooms] = __rooms;\n    const [selectedRoom, setSelectedRoom] = __selectedRoom;\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return (\n        <svg width={width} height={height}>\n            <Background\n                width={width}\n                height={height}\n            />\n\n            {rooms\n                .sort((a, b) => {\n                    const c = (a.id === selectedRoom)\n                    const d = (b.id === selectedRoom)\n                    return (c === d) ? 0 : c ? 1 : - 1\n                })\n                .map((room, i) => {\n                    return (\n                        <Room\n                            key={room.id}\n                            roomIndex={i}\n                            id={room.id}\n                            coords={room.coords}\n                            isSelected={selectedRoom === room.id ? true : false}\n                            room={room}\n                            points={room.points}\n                        />\n                    );\n                })}\n        </svg>\n    );\n}\n","import React, { useContext } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nimport { addCorner } from './../../utils'\nimport { RoomContext } from './../../RoomContext'\n\nconst QuickMenu = () => {\n\n    const {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedPathPoints,\n        __rooms,\n        __selectedRoom\n    } = useContext(RoomContext)\n\n    const [quickMenuPosition, setQuickMenuPosition] = __quickMenuPosition\n    const [quickMenuState, setQuickMenuState] = __quickMenuState\n    const [selectedPathPoints, setSelectedPathPoints] = __selectedPathPoints\n    const [rooms, setRooms] = __rooms\n    const [selectedRoom, setSelectedRoom] = __selectedRoom\n\n    const handleClose = (e) => {\n        setQuickMenuState(false)\n        setQuickMenuPosition(null)\n    }\n\n    const addDoor = e => {\n        console.log('selectedPathPoints', selectedPathPoints)\n        handleClose(e)\n    }\n\n\n    return (\n        <Menu\n            id=\"quickMenu\"\n            transitionDuration={{ enter: 0, exit: 0 }}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                quickMenuPosition !== null\n                    ? { top: quickMenuPosition.y, left: quickMenuPosition.x }\n                    : undefined\n            }\n            open={quickMenuState}\n            onClose={handleClose}\n        >\n            <MenuItem\n                onClick={(e) => {\n                    const newPoints = addCorner(e, selectedPathPoints)\n                    const index1 = selectedPathPoints[0].i\n                    const index2 = selectedPathPoints[1].i\n                    const newRooms = [...rooms]\n                    const index = newRooms.findIndex(room => room.id === selectedRoom)\n                    newRooms[index] = { ... newRooms[index], points : newRooms[index].points.splice(index1 + 1, 0, ...newPoints)}\n                    setRooms(newRooms)\n\n                    handleClose(e)\n                }}>\n                new corner\n            </MenuItem>\n\n            <MenuItem onClick={addDoor}>new door</MenuItem>\n        </Menu>\n    )\n}\n\nexport default QuickMenu\n","import React, { useState } from \"react\";\nimport Plan from \"./components/Plan\";\nimport \"./App.css\";\nimport QuickMenu from './components/UI/QuickMenu'\nimport { RoomContext } from './RoomContext'\n\nfunction App() {\n\n    const __quickMenuPosition = useState(null)\n    const __quickMenuState = useState(false)\n    const __rooms = useState([])\n    const __selectedRoom = useState(null)\n    const __selectedPathPoints = useState(null)\n\n    const CTX = {\n        __quickMenuPosition,\n        __quickMenuState,\n        __selectedRoom,\n        __rooms,\n        __selectedPathPoints\n    }\n    \n\n    return (\n        <div\n            className=\"App\"\n            style={{ overscrollBehavior: \"none\" }}\n            onContextMenu={e => e.preventDefault()}\n        >\n            <RoomContext.Provider value={CTX}>\n                <Plan/>\n                <QuickMenu/>\n            </RoomContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}